/*!
 *
 * SpreadJS Library 16.0.4
 *
 * Copyright(c) GrapeCity, Inc.  All rights reserved.
 *
 * Licensed under the SpreadJS Commercial License.
 * us.sales@grapecity.com
 * http://www.grapecity.com/en/licensing/grapecity/
 *
 *
 */
!(function (a) {
    "object" == typeof module && "object" == typeof module.exports
        ? (module.exports = a(require("@grapecity/spread-sheets")))
        : "function" == typeof define && define.amd
            ? define(["@grapecity/spread-sheets"], a)
            : "object" == typeof exports
                ? (exports.Spread = a(require("@grapecity/spread-sheets")))
                : a(GC);
})(function (a) {
    (a = "object" == typeof a ? a : {}),
        (a.Spread = (function (a) {
            var b = {};
            function c(d) {
                if (b[d]) return b[d].exports;
                var e = (b[d] = { i: d, l: !1, exports: {} });
                return a[d].call(e.exports, e, e.exports, c), (e.l = !0), e.exports;
            }
            return (
                (c.m = a),
                (c.c = b),
                (c.d = function (a, b, d) {
                    c.o(a, b) || Object.defineProperty(a, b, { enumerable: !0, get: d });
                }),
                (c.r = function (a) {
                    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(a, "__esModule", { value: !0 });
                }),
                (c.t = function (a, b) {
                    var d, e;
                    if ((1 & b && (a = c(a)), 8 & b)) return a;
                    if (4 & b && "object" == typeof a && a && a.__esModule) return a;
                    if (((d = Object.create(null)), c.r(d), Object.defineProperty(d, "default", { enumerable: !0, value: a }), 2 & b && "string" != typeof a))
                        for (e in a)
                            c.d(
                                d,
                                e,
                                function (b) {
                                    return a[b];
                                }.bind(null, e)
                            );
                    return d;
                }),
                (c.n = function (a) {
                    var b =
                        a && a.__esModule
                            ? function b() {
                                return a.default;
                            }
                            : function b() {
                                return a;
                            };
                    return c.d(b, "a", b), b;
                }),
                (c.o = function (a, b) {
                    return Object.prototype.hasOwnProperty.call(a, b);
                }),
                (c.p = ""),
                c((c.s = "./resource.fr.entry.js"))
            );
        })({
            "./dist/core/core.res.fr.js": function (a, b, c) {
                "use strict";
                var d, e, f, g;
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (d = c("Core")),
                    (e = c("Common")),
                    (f = d.GC$("meta[name='spreadjs culture']")),
                    f.length > 0 && ((g = d.GC$(f[f.length - 1]).attr("content")), null !== g && void 0 !== g && "fr-FR" === g.toLowerCase() && e.Common.CultureManager.culture("fr-FR")),
                    (b.Exp_NotSupported = "NotSupportException"),
                    (b.Exp_PasteExtentIsNull = "pasteExtent est nul"),
                    (b.Exp_InvalidPastedArea = "La zone collée doit avoir la même taille que la zone copiée ou coupée."),
                    (b.Exp_MultipleSelections = "Cette action ne fonctionnera pas sur les sélections multiples."),
                    (b.Exp_ChangePartOfArray = "Vous ne pouvez pas changer une partie d'un tableau."),
                    (b.Exp_InvalidAndSpace = "Invalide {0} : {1} (doit être compris entre {2} et {3})."),
                    (b.Exp_SrcIsNull = "L'argument \'src\' est nul"),
                    (b.Exp_DestIsNull = "L'argument \'dest\' est nul"),
                    (b.Exp_InvalidCustomFunction = "fonction personnalisée non valable"),
                    (b.Exp_InvalidCustomName = "nom personnalisé non valable"),
                    (b.Exp_IndexOutOfRange = "L'indice est hors plage!"),
                    (b.Exp_InvalidRange = 'Plage invalide'),
                    (b.Exp_ArgumentOutOfRange = 'ArgumentHorsDeLaPlage'),
                    (b.Exp_PasteSourceCellsLocked = 'La feuille source de la cellule est vérrouillé.'),
                    (b.Exp_InvalidCopyPasteSize = 'Les zones de copie et de collage n\'ont pas la même taille.'),
                    (b.Exp_PasteDestinationCellsLocked = 'La cellule que vous essayez de changer est protégée et donc en lecture seule.'),
                    (b.Exp_PasteChangeMergeCell = 'Ne peut pas changer une partie d\'une cellule fusionnée.'),
                    (b.Tip_Row = 'Ligne: '),
                    (b.Tip_Column = 'Colonne: '),
                    (b.Tip_Column_Offset = 'Offset:' ),
                    (b.Tip_Height = 'Hauteur: {0} pixels'),
                    (b.Tip_Width = 'Longeur: {0} pixels'),
                    (b.NewTab = 'Nouveau...'),
                    (b.Exp_EmptyNamedStyle = 'Le nom du style nommé ne peut être vide ou nul'),
                    (b.Exp_SheetNameInvalid = 'Le nom de la feuille ne peut pas être vide ou contenir ces caractères : *, :, [, ], ?, \\, /'),
                    (b.Exp_SheetNameConflict = 'Ce nom est déjà pris. Essayez un nom différent.'),
                    (b.Exp_ArrayFromulaSpan = 'Les formules de tableau ne sont pas valables dans les cellules fusionnées.'),
                    (b.Exp_DestSheetIsNull = 'destSheet est nul'),
                    (b.Exp_SheetIsNull = 'La feuille est vide.'),
                    (b.Exp_OverlappingSpans = 'Cette opération entraînera des chevauchements.'),
                    (b.NeedCanvasSupport = 'Vous avez besoin d\'un navigateur qui supporte entièrement HTML5 Canvas pour exécuter SpreadJS'),
                    (b.ARIA_Resize = "Redimensionner"),
                    (b.ARIA_First = "premier"),
                    (b.ARIA_PreviousArrow = "flèche précédente"),
                    (b.ARIA_NextArrow = "flèche suivante"),
                    (b.ARIA_Last = "dernière"),
                    (b.ARIA_PreviousButton = "bouton précédent"),
                    (b.ARIA_NextButton = "bouton suivant"),
                    (b.ARIA_SheetTab = "onglet feuille"),
                    (b.ARIA_NewSheet = "nouvelle feuille"),
                    (b.ARIA_Blank = "vide"),
                    (b.ARIA_Scrollbar_Left_Button = "barre de défilement bouton gauche"),
                    (b.ARIA_Scrollbar_Top_Button = "barre de défilement bouton haut"),
                    (b.ARIA_Scrollbar_Thumb_Button = "barre de défilement bouton pouce"),
                    (b.ARIA_Scrollbar_Right_Button = "barre de défilement bouton droit"),
                    (b.ARIA_Scrollbar_Bottom_Button = "barre de défilement bouton bas"),
                    (b.ARIA_Scrollbar_TRACK_Button = "barre de défilement bouton suivre"),
                    (b.ARIA_Cell = "cellule"),
                    (b.ARIA_HasValue = "a une valeur"),
                    (b.ARIA_HasFormula = "has formula {0}"),
                    (b.ARIA_HasComment = "has comment {0}"),
                    (b.ARIA_RowHeader = "ligne d'en-tête"),
                    (b.ARIA_ColumnHeader = "colonne d'en-tête"),
                    (b.SHEET_NAME = "Feuille"),
                    (b.ls1 = [
                        "30303030303030685f4f7900000000000000000000673030303030723030527530303030307458303030529630303030303030008a4f3076763030303030303030304e667630915e3030698a30585430005f795569903030768a3030303030",
                        "b0ecfcd7b7c6a32a0f1a3e205370726561644a530a2cc8e9a4a2eb486e5429286fedfcabebb0836e7f6b3650558c66447e59020a55a192ee8468575fb5fcd0fc786e0042846a4d0392541c0e6e34086f0a0a3eb66de86b54f8c74f60554402",
                    ]),
                    (b.ls1a = "1"),
                    (b.ls2 = ["30303030303030685f4f790000000000000000000000303030303030303067526795306b30000000000065303030", "b0ecfcd7b7c6a32a0f1a3e205370726561644a53200ac8e9a4a2ebadfc6e09b91f936f8b8a207b307d20e5675902"]),
                    (b.ls3 = ["30303030306058308930303030303030303030008854303052753030303030303030300030303030303030305f89303000", "e9a4bbf3b9c5314c8b644b8a7e5b9367575f020afdc16e5429286b6fe9a4bbf3b9adfc2fc8e9a4a2ebadfc4cc58167590a"]),
                    (b.ls4 = ["6b30303030303030605830535f303030303030303030", "635744e9a4bbf3b9c53192d697674d7e5b9367575f02"]),
                    (b.ls5 = ["30303030303030685f4f790000000000000000000000303030303030303067526795307d4e3030303030", "b0ecfcd7b7c6a32a0f1a3e205370726561644a53200ac8e9a4a2ebadfc6e09b91f934c4286577e575f02"]),
                    (b.ls6 = ["30303030303030685f4f790000000000000000003030303030720067303030303030915e30796b303030303030", "b0ecfcd7b7c6a32a0f1a3e205370726561644a53c8e9a4a2eb480a2cd0fcb8e7f36e4d036f8162558c66447e59"]),
                    (b.ls7 = ["30303030306058308930303030303030303030008854303052753030303030303030300030303030303030305f89303000", "e9a4bbf3b9c5314c8b644b8a7e5b9367575f020afdc16e5429286b6fe9a4bbf3b9adfc2fc8e9a4a2ebadfc4cc58167590a"]),
                    (b.ls8 = ["6b30303030303030605830535f303030303030303030", "635744e9a4bbf3b9c53192d697674d7e5b9367575f02"]),
                    (b.Exp_InsertCopiedCutCells = "Cette sélection n'est pas valable. La zone de copier/coller doit être de la même taille"),
                    (b.Exp_InsertCopiedCutCellsOnSpanTable = "Cela fonctionnera parce que cela déplacera des cellules dans un tableau de votre feuille de calcul ou fera en sorte que certaines cellules fusionnées ne seront plus fusionnées.."),
                    (b.Exp_InsertCopiedCutCellsNoRange = "Les nouvelles cellules ne peuvent pas être insérées car il y a des cellules non vides qui dépasseraient la feuille de calcul."),
                    (b.Exp_InvalidSortArrayFormulaInRange = "Impossible de trier la gamme actuelle car il existe une formule de tableau."),
                    (b.Exp_InvalidSortSpanInRange = "Impossible de trier la gamme actuelle en fonction de la portée."),
                    (b.Exp_InvalidSortPartTableOrMultiTableInRange = "Impossible de trier la gamme actuelle dans un tableau partiel ou s'il existe plus d'un tableau."),
                    (b.Exp_InvalidOperationInProtect = "The cell or chart you're trying to change is on a protected sheet. To make a change, unprotect the sheet."),
                    (b.EXP_IO = 'File read and write exception.'),
                    (b.EXP_FILE_FORMAT = 'Incorrect file format.'),
                    (b.EXP_NO_PASSWORD = 'The Excel file cannot be opened because the workbook/worksheet is password protected.'),
                    (b.EXP_INVALID_PASSWORD = 'The specified password is incorrect.'),
                    (b.NORMAL = 'Normal'),
                    (b.STEP = {
                        start: "start load {0}",
                        loadFileData: "load {0}'s data to spread",
                        loadSheetData: "load {0}'s data",
                        startCalc: "start reCalc",
                        loadSheetFormula: "load {0}'s formula",
                        parseFile: "parse {0} content"
                    });
            },
            "./dist/plugins/autoMerge/autoMerge.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }), (b.Exp_RangeIsIntersected = "La plage ne doit pas croiser les plages de sortie.");
            },
            "./dist/plugins/celltype/celltypes.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.OK = 'OK'),
                    (b.Cancel = 'Annuler'),
                    (b.Calendar_ShortWeeks_1 = "LUN"),
                    (b.Calendar_ShortWeeks_2 = "MAR"),
                    (b.Calendar_ShortWeeks_3 = "MER"),
                    (b.Calendar_ShortWeeks_4 = "JEU"),
                    (b.Calendar_ShortWeeks_5 = "VEN"),
                    (b.Calendar_ShortWeeks_6 = "SAM"),
                    (b.Calendar_ShortWeeks_7 = "DIM"),
                    (b.Calendar_Weeks_1 = "Lundi"),
                    (b.Calendar_Weeks_2 = "Mardi"),
                    (b.Calendar_Weeks_3 = "Mercredi"),
                    (b.Calendar_Weeks_4 = "Jeudi"),
                    (b.Calendar_Weeks_5 = "Vendredi"),
                    (b.Calendar_Weeks_6 = "Samedi"),
                    (b.Calendar_Weeks_7 = "Dimanche"),
                    (b.Calendar_ShortMonths_1 = "JAN"),
                    (b.Calendar_ShortMonths_2 = "FEV"),
                    (b.Calendar_ShortMonths_3 = "MAR"),
                    (b.Calendar_ShortMonths_4 = "AVR"),
                    (b.Calendar_ShortMonths_5 = "MAI"),
                    (b.Calendar_ShortMonths_6 = "JUI"),
                    (b.Calendar_ShortMonths_7 = "JUL"),
                    (b.Calendar_ShortMonths_8 = "AUG"),
                    (b.Calendar_ShortMonths_9 = "SEP"),
                    (b.Calendar_ShortMonths_10 = "OCT"),
                    (b.Calendar_ShortMonths_11 = "NOV"),
                    (b.Calendar_ShortMonths_12 = "DEC"),
                    (b.Calendar_Months_1 = "JANVIER"),
                    (b.Calendar_Months_2 = "FEVRIER"),
                    (b.Calendar_Months_3 = "MARS"),
                    (b.Calendar_Months_4 = "AVRIL"),
                    (b.Calendar_Months_5 = "MAI"),
                    (b.Calendar_Months_6 = "JUIN"),
                    (b.Calendar_Months_7 = "JUILLET"),
                    (b.Calendar_Months_8 = "AOUT"),
                    (b.Calendar_Months_9 = "SEPTEMBRE"),
                    (b.Calendar_Months_10 = "OCTOBRE"),
                    (b.Calendar_Months_11 = "NOVEMBRE"),
                    (b.Calendar_Months_12 = "DECEMBRE"),
                    (b.Calendar_Time_AM = "AM"),
                    (b.Calendar_Time_PM = "PM"),
                    (b.Calendar_EraName_1 = "M"),
                    (b.Calendar_EraName_2 = "T"),
                    (b.Calendar_EraName_3 = "S"),
                    (b.Calendar_EraName_4 = "H"),
                    (b.Calendar_FirstYear = "1"),
                    (b.Calendar_Today = "Aujourd'hui"),
                    (b.Calendar_LastMonth = "Aller au mois précédent"),
                    (b.Calendar_NextMonth = "Aller au mois prochain"),
                    (b.Calendar_LastYear = "Aller à l'année précédente"),
                    (b.Calendar_NextYear = "Aller à l'année prochaine"),
                    (b.Calendar_LastTenYear = "Aller aux dix années précédentes"),
                    (b.Calendar_NextTenYear = "Aller aux dix prochaines années"),
                    (b.Quarter_Format_1 = "Q1"),
                    (b.Quarter_Format_2 = "Q2"),
                    (b.Quarter_Format_3 = "Q3"),
                    (b.Quarter_Format_4 = "Q4"),
                    (b.ThemeColor = "Thème Couleurs"),
                    (b.StandardColor = "Couleurs standard"),
                    (b.Calculator_DivideByZeroInfo = "Ne peut pas être divisé par zéro."),
                    (b.Calculator_InvalidInputInfo = "Entrée non valable."),
                    (b.Calculator_SqrtParameterException = "Entrée non valable pour la fonction."),
                    (b.Calculator_OverFlowInfo = "Une opération arithmétique a entraîné un débordement."),
                    (b.MultiColumn_InvalidDataSource = "Source de donnée invalide. La formule doit retourner un tableau."),
                    (b.DataObject_MeetLock = "Cannot insert data because there's a locked cell in the way."),
                    (b.DataObject_MeetSpan = "Cannot insert data because there's a merged cell in the way."),
                    (b.DataObject_MeetTable = "Cannot insert data because a table in the way.");
            },
            "./dist/plugins/chart/chart.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.period = 'période'),
                    (b.movingAverage = 'MovingAverage'),
                    (b.exponential = 'Exponentiel'),
                    (b.linear = 'Linéaire'),
                    (b.logarithmic = 'Logarithmique'),
                    (b.polynomial = 'Polynôme'),
                    (b.power = 'Puissance');
            },
            "./dist/plugins/conditional/conditional.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_RuleIsNull = "L'argument \'rule\' est nul"),
                    (b.Exp_NotSupported = "NotSupportException");
            },
            "./dist/plugins/contextMenu/context-menu.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.copy = "Copier"),
                    (b.cut = "Couper"),
                    (b.pasteOptions = "Options de coller:"),
                    (b.pasteAll = "Tout"),
                    (b.pasteFormula = "Formules"),
                    (b.pasteValues = "Valeurs"),
                    (b.pasteFormatting = "Format"),
                    (b.pasteValuesFormatting = "Valeurs & Format"),
                    (b.pasteFormulaFormatting = "Formules & Format"),
                    (b.clearContents = "Effacer le contenu"),
                    (b.insertRows = "Insérer"),
                    (b.insertColumns = "Insérer"),
                    (b.deleteRows = "Supprimer"),
                    (b.deleteColumns = "Supprimer"),
                    (b.insertSheet = 'Insérer'),
                    (b.deleteSheet = 'Supprimer'),
                    (b.insertComment = "Insérer commentaire"),
                    (b.filter = 'Filtrer'),
                    (b.sort = 'Trier'),
                    (b.insertCopiedCells = 'Insérer des cellules copiées...'),
                    (b.insertCutCells = 'Insérer des cellules coupées...'),
                    (b.shiftCellsRight = 'Changement de cellule à droite'),
                    (b.shiftCellsDown = 'Réduire le nombre de cellules'),
                    (b.headerInsertCopiedCells = 'Insérer des cellules copiées'),
                    (b.headerInsertCutCells = 'Insérer des cellules coupées'),
                    (b.slicerSortAscend = "Tri de A à Z"),
                    (b.slicerSortDescend = "Tri de Z à A"),
                    (b.sortAscend = 'Tri de A à Z'),
                    (b.sortDescend = 'Tri de Z à A'),
                    (b.hideRows = "Cacher"),
                    (b.hideColumns = "Cacher"),
                    (b.hideSheet = 'Cacher'),
                    (b.unhideSheet = 'Montrer'),
                    (b.unhideColumns = "Montrer"),
                    (b.unhideRows = "Montrer"),
                    (b.editComment = 'Éditer commentaire'),
                    (b.deleteComment = 'Supprimer commentaire'),
                    (b.toggleComment = 'Montrer/Cacher commentaire'),
                    (b.removeSlicer = 'Supprimer'),
                    (b.removeFloatingObject = 'Supprimer'),
                    (b.tableInsert = "Insérer"),
                    (b.tableInsertRowsAbove = "Lignes du tableau ci-dessus"),
                    (b.tableInsertRowsBelow = "Tableau ci-dessous"),
                    (b.tableInsertColumnsLeft = "Colonnes du tableau à gauche"),
                    (b.tableInsertColumnsRight = "Colonnes du tableau à droite"),
                    (b.tableDelete = "Supprimer"),
                    (b.tableDeleteRows = "Lignes de la table"),
                    (b.tableDeleteColumns = "Colonnes du tableau"),
                    (b.hideSheetFailureInfo = 'Un classeur doit contenir au minimum une feuille visible. \nPour cacher, supprimer ou déplacer la ou les feuilles selectionnée, vous devez insérer une nouvelle feuille ou afficher une feuille cachée.'),
                    (b.pivotTableRefresh = "Rafraichir"),
                    (b.pivotTableMove = "Déplacer"),
                    (b.pivotTableRemove_ = "Retirer {0}"),
                    (b.pivotTableRemoveGrandTotal = "Retirer GrandTotal"),
                    (b.pivotTableValueFieldSettings = "Paramètres de valeur de champs..."),
                    (b.pivotTableOptions = "Option de Table pivot..."),
                    (b.pivotTableNumberFormat = "Formater nombre..."),
                    (b.pivotTableSort = "Trier"),
                    (b.pivotTableSummarizeValuesBy = "Résumer les valeurs par..."),
                    (b.pivotTableSum = "Somme"),
                    (b.pivotTableCount = "Compte"),
                    (b.pivotTableAverage = "Moyenne"),
                    (b.pivotTableMax = "Max"),
                    (b.pivotTableMin = "Min"),
                    (b.pivotTableProduct = "Produit"),
                    (b.pivotTableDistinctCount = "Compte distincte"),
                    (b.pivotTableMoreOptions = "Plus d'options"),
                    (b.pivotTableShowValueAs = "Montrer valeur par"),
                    (b.pivotTableNoCalculation = "Pas de calcul"),
                    (b.pivotTableGrandTotal = "% du Grand Total"),
                    (b.pivotTableColumnTotal = "% du Total colonne"),
                    (b.pivotTableRowTotal = "% du Total ligne"),
                    (b.pivotTableOf = "% de..."),
                    (b.pivotTableParentRowTotal = "% du Total ligne parente"),
                    (b.pivotTableParentColumnTotal = "% du Total colonne parente"),
                    (b.pivotTableOfParentTotal = "%  du Total parent..."),
                    (b.pivotTableDifferenceFrom = "Différence de..."),
                    (b.pivotTablePercentDifferenceFrom = "% Différence du..."),
                    (b.pivotTableRunningTotalIN = "Total courant en..."),
                    (b.pivotTablePercentRunningTotalIn = "% total courant en..."),
                    (b.pivotTableRankSmallestToLargest = "Classement du plus petit au plus grand..."),
                    (b.pivotTableRankLargestToSmallest = "Classement du plus grand au plus petit..."),
                    (b.pivotTableIndex = "Index"),
                    (b.pivotTableShowDetails = "Montrer détail"),
                    (b.pivotTableGroup = "Grouper..."),
                    (b.pivotTableUnGroup = "Dégrouper..."),
                    (b.pivotTableExpandOrCollapse = "Etendre/Regrouper"),
                    (b.pivotTableFilter = "Filtrer"),
                    (b.pivotTableSubtotal_ = "Sous-total {0}"),
                    (b.pivotTableHideFieldList = "Cacher liste des champs"),
                    (b.pivotTableFieldSettings = "Paramêtre champ..."),
                    (b.pivotTableClearFilterFrom_ = "Effacer le filtre de {0}"),
                    (b.pivotTableKeepOnlySelectedItems = "Garder seulement les éléments séléctionnés"),
                    (b.pivotTableHideSelectedItems = "Cacher les éléments séléctionnés"),
                    (b.pivotTableTop10 = "Top 10..."),
                    (b.pivotTableLabelFilters = "Filtres des étiquettes..."),
                    (b.pivotTableLabelFilters_Date = "Filtres des dates..."),
                    (b.pivotTableValueFilters = "Filtres des valeurs..."),
                    (b.pivotTableExpand = "Étendre"),
                    (b.pivotTableCollapse = "Regrouper"),
                    (b.pivotTableExpandEntireField = "Étendre champ entier"),
                    (b.pivotTableCollapseEntireField = "Regrouper champ entier"),
                    (b.pivotTableCollapseTo_ = "Regrouper jusqu'à {0}"),
                    (b.pivotTableExpandTo_ = "Étendre jusqu'à {0}"),
                    (b.pivotTableMove_ToBeginning = "Déplacer {0}  au début"),
                    (b.pivotTableMove_Up = "Déplacer {0} haut"),
                    (b.pivotTableMove_Down = "Déplacer {0} bas"),
                    (b.pivotTableMove_ToEnd = "Déplacer {0} à la fin"),
                    (b.pivotTableMove_ToLeft = "Déplacer {0} à gauche"),
                    (b.pivotTableMove_ToRight = "Déplacer {0} à droite"),
                    (b.pivotTableMove_ToColumns = "Déplacer {0} à colonne"),
                    (b.sigmaValue = "\u2211 Valeurs"),
                    (b.sigmaValueTemp = "Valeurs"),
                    (b.pivotTableAscend = "Trier du plus petit au plus grand"),
                    (b.pivotTableSortDescend = "Trier du plus grand au plus petit"),
                    (b.pinRows = "Épingler/désépingler lignes"),
                    (b.pinColumns = "Épingler/désépingler colonne"),
                    (b.promote = "Promote"),
                    (b.demote = "Demote"),
                    (b.moveUp = "Move Up"),
                    (b.moveDown = "Move Down"),
                    (b.addAfter = "Add After"),
                    (b.addBefore = "Add Before"),
                    (b.addAbove = "Add Above"),
                    (b.addBelow = "Add Below"),
                    (b.expandAllLevels = "Expand All Levels"),
                    (b.collapseAllLevels = "Collapse All Levels"),
                    (b.expandLevel1 = "Expand to Level 1"),
                    (b.expandLevel2 = "Expand to Level 2"),
                    (b.expandLevel3 = "Expand to Level 3"),
                    (b.expandLevel4 = "Expand to Level 4"),
                    (b.expandLevel5 = "Expand to Level 5"),
                    (b.expandLevel6 = "Expand to Level 6"),
                    (b.expandLevel7 = "Expand to Level 7"),
                    (b.expandLevel8 = "Expand to Level 8"),
                    (b.expandLevel9 = "Expand to Level 9"),
                    (b.paste = "Coller");
            },
            "./dist/plugins/data/data.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }), (b.Exp_NotSupportedDataSource = "La source de données n'est pas prise en charge!");
            },
            "./dist/plugins/exportPDF/printPdf.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_FileIOError = "Erreur de lecture et d'écriture de fichiers."),
                    (b.Exp_FontError = "Pas de format de police pris en charge ou de police PDF standard.");
            },
            "./dist/plugins/fill/fill.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.CopyCells = 'Copier cellules'),
                    (b.FillSeries = 'Remplir séries'),
                    (b.FillFormattingOnly = 'Remplir le format uniquement'),
                    (b.FillWithoutFormatting = 'Remplir sans le format'),
                    (b.Exp_NumberOnly = 'Ne fonctionne que pour les nombres'),
                    (b.Exp_RangeContainsMergedCell = 'La plage ne devrait pas avoir de cellules fusionnées.'),
                    (b.Exp_TargetContainsMergedCells = 'La plage cible ne doit pas comporter de cellules fusionnées.'),
                    (b.Exp_MergedCellsIdentical = 'Cette opération nécessite que les cellules fusionnées soient de taille identique.'),
                    (b.Exp_FillRangeContainsMergedCell = 'Impossible de remplir une plage qui contient une cellule fusionnée.'),
                    (b.Exp_FillCellsReadOnly = 'Les cellules que vous essayez de remplir sont protégées et donc en lecture seule.'),
                    (b.Exp_ChangeMergedCell = 'Ne peut pas changer une partie de la cellule fusionnée.'),
                    (b.Exp_ColumnReadOnly = 'La colonne que vous essayez de modifier est protégée et donc en lecture seule.'),
                    (b.Exp_RowReadOnly = 'La ligne que vous essayez de changer est protégée et donc en lecture seule.'),
                    (b.Exp_CellReadOnly = 'La cellule que vous essayez de changer est protégée et donc en lecture seule.'),
                    (b.Exp_RangeIsNull = 'la plage est vide'),
                    (b.Exp_ChangePartOfArray = 'Ne peut pas changer une partie d\'un tableau.');
            },
            "./dist/plugins/filter/filter.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_InvalidColumnIndex = 'Index des colonnes non valables.'),
                    (b.SortAscending = 'Trier par ordre croissant'),
                    (b.SortDescending = 'Trier par ordre décroissant'),
                    (b.OK = 'OK'),
                    (b.Cancel = 'Annuler'),
                    (b.Search = 'Recherchez'),
                    (b.CheckAll = 'Tout cocher'),
                    (b.UncheckAll = 'Décocher tout'),
                    (b.Blanks = '(Vide)'),
                    (b.Exp_FilterItemIsNull = 'FilterItem est nul.'),
                    (b.Show = 'Voir'),
                    (b.ShowRows = 'Afficher les lignes où:'),
                    (b.And = 'Et'),
                    (b.Or = 'Ou'),
                    (b.SortColor = 'Trier par couleur'),
                    (b.FilterColor = 'Filtrer par couleur'),
                    (b.FilterCellTitle = 'Filtrer par couleur de cellule'),
                    (b.FilterFontTitle = 'Filtrer par couleur de police'),
                    (b.SortCellTitle = 'Trier par couleur de cellule'),
                    (b.SortFontTitle = 'Trier par couleur de police'),
                    (b.FontColor = 'Plus de couleurs de police...'),
                    (b.CellColor = 'Plus de couleurs de cellules...'),
                    (b.NoFill = 'Sans remplissage'),
                    (b.Automatic = 'Automatique'),
                    (b.Clear = 'Effacer le filtre de {0}'),
                    (b.TextFilter = 'Filtres de texte'),
                    (b.DateFilter = 'Filtres de date'),
                    (b.NumberFilter = 'Filtres de nombre'),
                    (b.Custom = 'Filtres personnalisé...'),
                    (b.Equal = 'Égale...'),
                    (b.NotEqual = 'N\'est pas égale...'),
                    (b.GreaterThan = 'Supérieur à...'),
                    (b.GreaterOrEquals = 'Supérieur ou égal à...'),
                    (b.LessThan = 'Inférieur à...'),
                    (b.LessThanOrEquals = 'Inférieur ou égale à...'),
                    (b.Between = 'Entre...'),
                    (b.Top10 = 'Top 10...'),
                    (b.AboveAverage = 'Au-dessus de la moyenne'),
                    (b.BelowAverage = 'En dessous de la moyenne'),
                    (b.Begin = 'Commence par...'),
                    (b.End = 'Se termine par...'),
                    (b.Contain = 'Contient...'),
                    (b.NotContain = 'Ne contient pas...'),
                    (b.Before = 'Avant...'),
                    (b.After = 'Après...'),
                    (b.Tomorrow = 'Demain'),
                    (b.Today = 'Aujourd\'hui'),
                    (b.Yesterday = 'Hier'),
                    (b.NextWeek = 'La semaine prochaine'),
                    (b.ThisWeek = 'Cette semaine'),
                    (b.LastWeek = 'La semaine dernière'),
                    (b.NextMonth = 'Le mois prochain'),
                    (b.ThisMonth = 'Ce mois-ci'),
                    (b.LastMonth = 'Le mois dernier'),
                    (b.NextQuarter = 'Prochain trimestre'),
                    (b.ThisQuarter = 'Ce trimestre'),
                    (b.LastQuarter = 'Dernier trimestre'),
                    (b.NextYear = 'L\'année prochaine'),
                    (b.ThisYear = 'Cette année'),
                    (b.LastYear = 'L\'année dernière'),
                    (b.YearToDate = 'Depuis le début de l\'année'),
                    (b.AllDates = 'Toutes les dates de la période'),
                    (b.Top10Filter = 'Top 10 des filtres automatiques'),
                    (b.CustomTitle = 'Filtre automatique personnalisé'),
                    (b.ColorTitle = 'Couleurs de cellules disponibles'),
                    (b.top = 'haut'),
                    (b.bottom = 'bottom'),
                    (b.SortCell = 'Sélectionnez une couleur de cellule pour le tri par:'),
                    (b.SortFont = 'Sélectionnez une couleur de police pour le tri par:'),
                    (b.FilterCell = 'Sélectionnez une couleur de cellule à filtrer:'),
                    (b.FilterFont = 'Sélectionnez une couleur de police à filtrer:'),
                    (b.Selected = 'Sélectionné:'),
                    (b.IsEquals = 'équivaut à'),
                    (b.NotEquals = 'n\'est pas égal'),
                    (b.IsGreaterThan = 'est supérieure à'),
                    (b.IsGreaterOrEqual = 'est supérieure ou égale à'),
                    (b.IsLess = 'est inférieur à'),
                    (b.LessOrEqual = 'est inférieure ou égale à'),
                    (b.IsBeginWith = 'commence par'),
                    (b.NotBeginWith = 'ne commence pas par'),
                    (b.IsEndWith = 'se termine par'),
                    (b.NotEndWith = 'ne se termine pas par'),
                    (b.IsContain = 'contient'),
                    (b.NotContains = 'ne contient pas'),
                    (b.IsAfter = 'est après'),
                    (b.AfterOrEqual = 'est postérieure ou égale à'),
                    (b.IsBefore = 'est avant'),
                    (b.BeforeOrEqual = 'est antérieure ou égale à'),
                    (b.Q1 = 'Trimestre 1'),
                    (b.Q2 = 'Trimestre 2'),
                    (b.Q3 = 'Trimestre 3'),
                    (b.Q4 = 'Trimestre 4'),
                    (b.Jan = 'Janvier'),
                    (b.Feb = 'Février'),
                    (b.Mar = 'Mars'),
                    (b.Apr = 'Avril'),
                    (b.May = 'Mai'),
                    (b.Jun = 'Juin'),
                    (b.Jul = 'Juillet'),
                    (b.Aug = 'Août'),
                    (b.Sep = 'Septembre'),
                    (b.Oct = 'Octobre'),
                    (b.Nov = 'Novembre'),
                    (b.Dec = 'Décembre'),
                    (b.Explain1 = 'Utilisez ? pour représenter n\'importe quel unique caractère'),
                    (b.Explain2 = 'Utilisez * pour représenter toute série de caractères'),
                    (b.Year = ''),
                    (b.Day = ''),
                    (b.add_current_filter = 'Ajouter la séléction courant au filtre'),
                    (b.invalidCondition = "Error in parse line");
            },
            "./dist/plugins/floatingObject/floatingobject.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_FloatingObjectHasSameNameError = 'La feuille de travail actuelle comporte déjà un objet flottant du même nom.'),
                    (b.Exp_FloatingObjectNameEmptyError = 'L\'objet flottant doit avoir un nom');
            },
            "./dist/plugins/group/group.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_InvalidIndex = 'Index invalide'),
                    (b.Exp_InvalidCount = 'Compte invalide'),
                    (b.Exp_InvalidLevel = 'Niveau invalide'),
                    (b.Exp_GroupInfoIsNull = 'groupInfo est nul'),
                    (b.Exp_GROUP_PROTECTED = "Vous ne pouvez pas utiliser cette commande sur une feuille protégée. Pour utiliser cette commande, vous devez d'abord déprotéger la feuille..");
            },
            "./dist/plugins/io/io.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.EXP_IO = "File read and write exception."),
                    (b.EXP_FILE_FORMAT = "Incorrect file format."),
                    (b.GET_PARTIAL_VALUES_ERROR_MSG = "error file");
            },
            "./dist/plugins/outlineColumn/outlineColumn.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_GROUP_PROTECTED =
                        "Vous ne pouvez pas utiliser cette commande sur une feuille protégée. Pour utiliser cette commande, vous devez d'abord déprotéger la feuille..");
            },
            "./dist/plugins/pivot/pivot.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.RepeatName = "Répéter le nom"),
                    (b.NotExist = "N'existe pas"),
                    (b.SubtotalType_Prefix_0 = "Moyenne de "),
                    (b.SubtotalType_Prefix_1 = "Nombre de "),
                    (b.SubtotalType_Prefix_2 = "Comptes Nombres de "),
                    (b.SubtotalType_Prefix_3 = "Max. de "),
                    (b.SubtotalType_Prefix_4 = "Min de "),
                    (b.SubtotalType_Prefix_5 = "Produit de "),
                    (b.SubtotalType_Prefix_6 = "Ecart-type de "),
                    (b.SubtotalType_Prefix_7 = "Ecart-type de "),
                    (b.SubtotalType_Prefix_8 = "Somme de "),
                    (b.SubtotalType_Prefix_9 = "Varr de "),
                    (b.SubtotalType_Prefix_10 = "Varp de "),
                    (b.ColumnLabels = "Étiquettes des colonnes"),
                    (b.Total = " Total"),
                    (b.All = "Tous"),
                    (b.MultipleItems = "Éléments multiples"),
                    (b.RowLabels = "Étiquettes de rangée"),
                    (b.GrandTotal = "Grand Total"),
                    (b.Values = "Valeurs"),
                    (b.PivotPanel_Title = "Champs du tableau croisé"),
                    (b.PivotPanel_ReportText = "Choisissez les champs à ajouter au rapport"),
                    (b.PivotPanel_SearchPlaceholder = "Recherche"),
                    (b.PivotPanel_FieldAreaText = "Faites glisser les champs entre les zones ci-dessous:"),
                    (b.PivotPanel_FiltersItemsTitle = "Filtres"),
                    (b.PivotPanel_RowsItemsTitle = "Lignes"),
                    (b.PivotPanel_ColumnsItemsTitle = "Colonnes"),
                    (b.PivotPanel_ValuesItemsTitle = "Valeurs"),
                    (b.PivotPanel_DeferUpdateText = "Report de la mise en page"),
                    (b.EmptyPivotTable_PromptMessage1 = "Cliquez dans cette zone pour travailler avec le tableau croisé."),
                    (b.EmptyPivotTable_PromptMessage2 = "Activez la liste des champs du tableau croisé pour travailler avec le celui ci."),
                    (b.PivotPanel_Update = "MàJ"),
                    (b.PivotPanel_DropDownList_Up = "Monter"),
                    (b.PivotPanel_DropDownList_Down = "Descendre"),
                    (b.PivotPanel_DropDownList_Beginning = "Déplacement au début"),
                    (b.PivotPanel_DropDownList_End = "Déplacer à la fin"),
                    (b.PivotPanel_DropDownList_ReportFilter = "Déplacer vers le filtre de rapport"),
                    (b.PivotPanel_DropDownList_Row = "Déplacer vers les étiquettes de ligne"),
                    (b.PivotPanel_DropDownList_Col = "Déplacer vers les étiquettes de colonne"),
                    (b.PivotPanel_DropDownList_Values = "Déplacer vers les valeurs"),
                    (b.PivotPanel_DropDownList_Remove = "Retirer le champ"),
                    (b.PivotPanel_DropDownList_Set = "Paramètres du champ..."),
                    (b.PivotPanel_DropDownList_ValueSet = "Paramètres de valeur du champ..."),
                    (b.PivotPanel_Fields_MoveTo_ReportField = "Ajouter un filtre de rapport"),
                    (b.PivotPanel_Fields_MoveTo_RowLabel = "Ajouter aux étiquettes de lignes"),
                    (b.PivotPanel_Fields_MoveTo_ColLabel = "Ajouter aux étiquettes de colonnes"),
                    (b.PivotPanel_Fields_MoveTo_Value = "Ajouter aux valeurs"),
                    (b.wmk1 = "4164642d6f6e73204e6f7420456e61626c65643a205069766f745461626c65"),
                    (b.wmk2 = "4164642d6f6e7320456e61626c65643a205069766f745461626c65"),
                    (b.PivotPanel_LabelOrValue_ClearFilter = "Effacer le filtre"),
                    (b.PivotPanel_ValueFilterOrLabel_Equals = "Est égal à..."),
                    (b.PivotPanel_ValueFilterOrLabel_NotEqual = "N'est pas égal à..."),
                    (b.PivotPanel_ValueFilterOrLabel_GreaterThan = "Est supérieur à..."),
                    (b.PivotPanel_ValueFilterOrLabel_GreaterOrTo = "Est supérieur ou égal à..."),
                    (b.PivotPanel_ValueFilterOrLabel_LessThan = "Est inférieur à..."),
                    (b.PivotPanel_ValueFilterOrLabel_LessOrTo = "Est inférieur ou égal à..."),
                    (b.PivotPanel_ValueFilterOrLabel_Between = "Est entre..."),
                    (b.PivotPanel_ValueFilterOrLabel_NotBetween = "n'est pas entre..."),
                    (b.PivotPanel_ValueFilter_Top10 = "Top 10..."),
                    (b.PivotPanel_ValueFilterOrLabel_IsBeginWith = "Commence par..."),
                    (b.PivotPanel_ValueFilterOrLabel_NotBegin = "Ne commence pas par..."),
                    (b.PivotPanel_ValueFilterOrLabel_End = "Se termine par..."),
                    (b.PivotPanel_ValueFilterOrLabel_NotEndWith = "Ne se termine pas par..."),
                    (b.PivotPanel_ValueFilterOrLabel_Contain = "Contient..."),
                    (b.PivotPanel_ValueFilterOrLabel_NotContain = "Ne contient pas..."),
                    (b.ValueFilterOrLabel_Equals = "Est égal..."),
                    (b.ValueFilterOrLabel_NotEqual = "N'est pas égal..."),
                    (b.ValueFilterOrLabel_GreaterThan = "Est supérieur à..."),
                    (b.ValueFilterOrLabel_GreaterOrTo = "Est supérieur ou égal à..."),
                    (b.ValueFilterOrLabel_LessThan = "Est inférieur à..."),
                    (b.ValueFilterOrLabel_LessOrTo = "Est inférieur ou égal à..."),
                    (b.ValueFilterOrLabel_Between = "Est entre..."),
                    (b.ValueFilterOrLabel_NotBetween = "N'est pas entre..."),
                    (b.ValueFilterOrLabelSelect_GreaterThan = "Est supérieur à..."),
                    (b.ValueFilterOrLabelSelect_GreaterOrTo = "Est supérieur ou égal à..."),
                    (b.ValueFilterOrLabelSelect_LessThan = "Est inférieur à..."),
                    (b.ValueFilterOrLabelSelect_LessOrTo = "Est inférieur ou égal à..."),
                    (b.ValueFilterOrLabelSelect_Between = "Est entre..."),
                    (b.ValueFilterOrLabelSelect_NotBetween = "N'est pas entre..."),
                    (b.ValueFilterOrLabel_IsBeginWith = "Commence par..."),
                    (b.ValueFilterOrLabel_NotBegin = "Ne commence pas par..."),
                    (b.ValueFilterOrLabel_End = "Se termine par..."),
                    (b.ValueFilterOrLabel_NotEndWith = "Ne se termine pas par..."),
                    (b.ValueFilterOrLabel_Contain = "Contient..."),
                    (b.ValueFilterOrLabel_NotContain = "Ne contient pas..."),
                    (b.PivotPanel_ValueFilterOrLabel_Before = "Avant..."),
                    (b.PivotPanel_ValueFilterOrLabel_After = "Après..."),
                    (b.PivotPanel_ValueFilterOrLabel_Tomorrow = "Demain"),
                    (b.PivotPanel_ValueFilterOrLabel_Today = "Aujourd'hui"),
                    (b.PivotPanel_ValueFilterOrLabel_Yesterday = "Hier"),
                    (b.PivotPanel_ValueFilterOrLabel_NextWeek = "Semaine prochaine"),
                    (b.PivotPanel_ValueFilterOrLabel_ThisWeek = "Cette semaine"),
                    (b.PivotPanel_ValueFilterOrLabel_LastWeek = "La semaine dernière"),
                    (b.PivotPanel_ValueFilterOrLabel_NextMonth = "Mois prochain"),
                    (b.PivotPanel_ValueFilterOrLabel_ThisMonth = "Ce mois-ci"),
                    (b.PivotPanel_ValueFilterOrLabel_LastMonth = "Le mois dernier"),
                    (b.PivotPanel_ValueFilterOrLabel_NextQuarter = "Prochain trimestre"),
                    (b.PivotPanel_ValueFilterOrLabel_ThisQuarter = "Ce trimestre"),
                    (b.PivotPanel_ValueFilterOrLabel_LastQuarter = "Dernier trimestre"),
                    (b.PivotPanel_ValueFilterOrLabel_NextYear = "L'année prochaine"),
                    (b.PivotPanel_ValueFilterOrLabel_ThisYear = "Cette année"),
                    (b.PivotPanel_ValueFilterOrLabel_LastYear = "L'année dernière"),
                    (b.PivotPanel_ValueFilterOrLabel_YearToDate = "Depuis le début de l'année"),
                    (b.PivotPanel_ValueFilterOrLabel_MonthToDate = "Month to Date"),
                    (b.PivotPanel_ValueFilterOrLabel_QuarterToDate = "Quarter to Date"),
                    (b.PivotPanel_ValueFilterOrLabel_ParallelYearToDate = "Parallel Year to Date"),
                    (b.PivotPanel_ValueFilterOrLabel_ParallelMonthToDate = "Parallel Month to Date"),
                    (b.PivotPanel_ValueFilterOrLabel_ParallelQuarterToDate = "Parallel Quarter to Date"),
                    (b.PivotPanel_ValueFilterOrLabel_AllDates = "Toutes les dates de la période"),
                    (b.PivotPanel_ValueFilterOrLabel_Custom = "Filtre personnalisé..."),
                    (b.PivotPanel_Sort_A_Z = "Trier de A à Z"),
                    (b.PivotPanel_Sort_Z_A = "Trier de Z à A"),
                    (b.PivotPanel_Sort_Smallest_Largest = "Trier du plus petit au plus grand"),
                    (b.PivotPanel_Sort_Largest_Smallest = "Trier du plus grand au plus petit"),
                    (b.PivotPanel_Sort_More = "More Sort Options..."),
                    (b.PivotPanel_Filter_Clear = "Effacer le filtre de {0}"),
                    (b.PivotPanel_Filter_Label = "Filtrer étiquettes"),
                    (b.PivotPanel_Filter_Value = "Filtrer valeurs"),
                    (b.Ok = "OK"),
                    (b.Cancel = "Annuler"),
                    (b.NumberFormat = "Formater"),
                    (b.LabelFormat = "Label Format"),
                    (b.Number = "Numéro"),
                    (b.FormatCells = "Formater les cellules"),
                    (b.Sample = "Exemple"),
                    (b.Type = "Type"),
                    (b.CustomFormats = [
                        "General",
                        "0",
                        "0.00",
                        "#,##0",
                        "#,##0.00",
                        "#,##0;(#,##0)",
                        "#,##0;[Red](#,##0)",
                        "#,##0.00;(#,##0.00)",
                        "#,##0.00;[Red](#,##0.00)",
                        "$#,##0;($#,##0)",
                        "$#,##0;[Red]($#,##0)",
                        "$#,##0.00;($#,##0.00)",
                        "$#,##0.00;[Red]($#,##0.00)",
                        "0%",
                        "0.00%",
                        "0.00E+00",
                        "##0.0E+0",
                        "# ?/?",
                        "# ??/??",
                        "m/d/yyyy",
                        "d-mmm-yy",
                        "d-mmm",
                        "mmm-yy",
                        "h:mm AM/PM",
                        "h:mm:ss AM/PM",
                        "hh:mm",
                        "hh:mm:ss",
                        "m/d/yyyy hh:mm",
                        "mm:ss",
                        "mm:ss.0",
                        "@",
                        "[h]:mm:ss",
                        "$ #,##0;$ (#,##0);$ \"-\";@",
                        " #,##0; (#,##0); \"-\";@",
                        "$ #,##0.00;$ (#,##0.00);$ \"-\"??;@",
                        " #,##0.00; (#,##0.00); \"-\"??;@",
                        "hh:mm:ss",
                        "00000",
                        "# ???/???",
                        "000-00-0000",
                        "dddd, mmmm dd, yyyy",
                        "m/d;@",
                        "[<=9999999]###-####;(###) ###-####",
                        "# ?/8"
                    ]),
                    (b.Select_Field = "Sélectionnez le champ"),
                    (b.PivotPanel_Filter_SelectAll = "Cocher tout"),
                    (b.PivotPanel_Filter_NoSelectAll = "Décocher tout"),
                    (b.PivotPanel_Filter_Search = "Rechercher"),
                    (b.Label_Title = "Filtre d'étiquettes"),
                    (b.Label_Show = "Afficher les éléments pour lesquels l'étiquette"),
                    (b.Use_Single_Character = "Utilisez ? pour représenter tout caractère unique"),
                    (b.Use_Series_Characters = "Utilisez * pour représenter tout caractère de série"),
                    (b.Value_Show = "Afficher les éléments pour lesquels"),
                    (b.Value_Title = "Filtrer valeur"),
                    (b.Top_Ten_Filter = "Filtre Top 10 "),
                    (b.TopTenShow = "montrer"),
                    (b.Top = "Haut"),
                    (b.Bottom = "Bas"),
                    (b.Top_Item = "élements"),
                    (b.Top_Percent = "Pourcentage"),
                    (b.Top_Sum = "Somme"),
                    (b.ByJoiner = "par"),
                    (b.AndJoiner = "et"),
                    (b.Q1 = "1er trimestre"),
                    (b.Q2 = "2e trimestre"),
                    (b.Q3 = "3e trimestre"),
                    (b.Q4 = "4e trimestre"),
                    (b.Jan = "Janvier"),
                    (b.Feb = "Février"),
                    (b.Mar = "Mars"),
                    (b.Apr = "Avril"),
                    (b.May = "Mai"),
                    (b.Jun = "Juin"),
                    (b.Jul = "Juillet"),
                    (b.Aug = "Août"),
                    (b.Sep = "Septembre"),
                    (b.Oct = "Octobre"),
                    (b.Nov = "Novembre"),
                    (b.Dec = "Décembre"),
                    (b.IsBefore = "est avant"),
                    (b.IsBeforeOrEqual = "est avant ou égale à"),
                    (b.IsAfter = "est après"),
                    (b.IsAfterOrEqual = "est après ou égal à"),
                    (b.IsBetween = "est entre"),
                    (b.IsNotBetween = "n'est pas entre"),
                    (b.DateFilterTitle = "Filtrer par date"),
                    (b.DateShow = "Afficher les éléments pour lesquels la date"),
                    (b.WholeDays = "Jours entiers"),
                    (b.ValueSetting = "Paramètres du champ de valeur"),
                    (b.SourceName = "Nom de la source:"),
                    (b.CustomName = "Nom personnalisé:"),
                    (b.SummarizeValue = "Résumer les valeurs par"),
                    (b.SummarizeValueField = "Résumez le champ de valeurs par"),
                    (b.ChooseType = "Choisissez le type de calcul que vous souhaitez utiliser pour comprimer les données du champ sélectionné."),
                    (b.Sum = "Somme"),
                    (b.Count = "Compte"),
                    (b.Average = "Moyenne"),
                    (b.Max = "Max"),
                    (b.Min = "Min"),
                    (b.Product = "Produit"),
                    (b.CountNumbers = "Compter les nombres"),
                    (b.StdDev = "Ecart-type"),
                    (b.StdDevp = "StdDevp"),
                    (b.Var = "Var"),
                    (b.Varp = "Varp"),
                    (b.sigmaValue = "\u2211 valeur"),
                    (b.DateFormatError = "Ce n'est pas une date valide"),
                    (b.noCalculation = "Aucun calcul"),
                    (b.percentGrandTotal = "% du Grand Total"),
                    (b.percentColumnTotal = "% de la colonne Total"),
                    (b.percentRowTotal = "% de la ligne Total"),
                    (b.percentEllipsis = "% de ..."),
                    (b.percentParentRowTotal = "% de la ligne Total parente"),
                    (b.percentParentColumnTotal = "% de la colonne Total parente"),
                    (b.percentParentTotal = "% du total parent ..."),
                    (b.difference = "Différence par rapport à ..."),
                    (b.percentDifference = "De la différence de ..."),
                    (b.runningTotal = "Total courant en ..."),
                    (b.percentRunningTotal = "% Total courant en ..."),
                    (b.rankSmallestLargest = "Classement du plus petit au plus grand ..."),
                    (b.rankLargestSmallest = "Classement du plus grand au plus petit ..."),
                    (b.index = "Index"),
                    (b.showValueAsDialog = [
                        '', '', '', '',
                        "% Of ",
                        '', '',
                        "% of Parent Total ",
                        "Différence par rapport à ",
                        "De la différence de ",
                        "Total courant en ",
                        "% Total courant en ",
                        "Classement du plus petit au plus grand ",
                        "Classement du plus grand au plus petit ",
                        ''
                    ]),
                    (b.baseField = "Champ de base:"),
                    (b.baseItem = "Élément de base:"),
                    (b.grouping = "Regroupement"),
                    (b.auto = "Auto"),
                    (b.startingAt = "À partir de:"),
                    (b.endingAt = "Finissant à :"),
                    (b.groupBy = "Par :"),
                    (b.seconds = "Secondes"),
                    (b.minutes = "Minutes"),
                    (b.hours = "Heures"),
                    (b.days = "Jours"),
                    (b.months = "Mois"),
                    (b.quarters = "Trimestres"),
                    (b.years = "Années"),
                    (b.numberOfDays = "Nombre de jours"),
                    (b.NoHaveSpread = "exception au classeur"),
                    (b.SourceError = "Exception de données source, impossible de créer un tableau croisé dynamique."),
                    (b.SourceNotIsTableNameOrFormula = "les données sources ne sont pas le nom de la table et la formule"),
                    (b.SourceDataOnlyOne = "Cette commande nécessite au moins deux lignes de données sources. Vous ne pouvez pas utiliser la commande sur une sélection dans une seule ligne."),
                    (b.FieldAreaLimited = "Le champ que vous déplacez ne peut pas être placé dans cette zone du rapport.."),
                    (b.Views = "Vues"),
                    (b.Group = "Grouper"),
                    (b.param_error = "le paramètre est nul ou indéfini"),
                    (b.EmptyValueFieldError = "Vous devez disposer d'au moins un champ dans la zone des valeurs pour pouvoir appliquer un filtre de valeur."),
                    (b.DefaultPivotTableViewName = "Vue pivotante"),
                    (b.toolTipContent_Row = "Ligne : "),
                    (b.toolTipContent_Column = "Colonne : "),
                    (b.toolTipContent_Value = "Valeur : "),
                    (b.toolTipContent_NoValue = "Pas de valeur"),
                    (b.deferLayoutUpdate = "Report de la mise en page");
                    function d() {
                    return [
                        b.ValueFilterOrLabel_Equals,
                        b.ValueFilterOrLabel_NotEqual,
                        b.ValueFilterOrLabel_IsBeginWith,
                        b.ValueFilterOrLabel_NotBegin,
                        b.ValueFilterOrLabel_End,
                        b.ValueFilterOrLabel_NotEndWith,
                        b.ValueFilterOrLabel_Contain,
                        b.ValueFilterOrLabel_NotContain,
                        b.ValueFilterOrLabelSelect_GreaterThan,
                        b.ValueFilterOrLabelSelect_GreaterOrTo,
                        b.ValueFilterOrLabelSelect_LessThan,
                        b.ValueFilterOrLabelSelect_LessOrTo,
                        b.ValueFilterOrLabelSelect_Between,
                        b.ValueFilterOrLabelSelect_NotBetween,
                    ];
                }
                b.getStringLabelFilterItemText = d;
                function e() {
                    return [b.ValueFilterOrLabel_Equals, b.ValueFilterOrLabel_NotEqual, b.IsBefore, b.IsBeforeOrEqual, b.IsAfter, b.IsAfterOrEqual, b.IsBetween, b.IsNotBetween];
                }
                b.getDateLabelFilterItemText = e;
                function f() {
                    return [
                        b.ValueFilterOrLabel_Equals,
                        b.ValueFilterOrLabel_NotEqual,
                        b.ValueFilterOrLabelSelect_GreaterThan,
                        b.ValueFilterOrLabelSelect_GreaterOrTo,
                        b.ValueFilterOrLabelSelect_LessThan,
                        b.ValueFilterOrLabelSelect_LessOrTo,
                        b.ValueFilterOrLabelSelect_Between,
                        b.ValueFilterOrLabelSelect_NotBetween,
                    ];
                }
                (b.getValueFilterItemText = f),
                (b.PivotTableErrorMessage_ShowDetail = "Impossible d'afficher ou de masquer les détails de cette sélection"),
                (b.PivotTableErrorMessage_MakeChange = "Nous ne pouvons pas effectuer cette modification pour les cellules sélectionnées car elle affecterait un tableau croisé dynamique. Utilisez la liste des champs pour modifier le rapport. Si vous essayez d'insérer ou de supprimer des cellules, déplacez le tableau croisé dynamique et réessayez."),
                (b.PivotTableErrorMessage_ExistData = "Il y a déjà des données dans {}. Voulez-vous les remplacer ?"),
                (b.PivotTableErrorMessage_EditWhenDefer = "Le tableau croisé dynamique ne peut pas être modifié si la case à cocher Différer la mise à jour de la mise en page est cochée. Pour modifier le rapport, désactivez la case à cocher Différer la mise à jour de la mise en page au bas de la liste des champs du tableau croisé dynamique."),
                (b.PivotTableErrorMessage_DuplicatedFieldName = "Le nom du champ du tableau croisé dynamique existe déjà."),
                (b.PivotTableErrorMessage_EmptyFieldName = "Impossible d'entrer une valeur nulle comme nom d'élément ou de champ dans un rapport de tableau croisé dynamique."),
                (b.PivotTableErrorMessage_Protect = "Cette commande ne peut pas être exécutée lorsqu'une feuille protégée contient un autre rapport Tableau croisé dynamique basé sur les mêmes données sources. Pour supprimer la protection de la feuille qui contient l'autre rapport, cliquez sur l'onglet Feuille, puis sur Déprotéger la feuille (onglet Révision, groupe Modifications). Puis réessayez la commande."),
                (b.PivotTableErrorMessage_EmptySourceFieldName = "Le nom du champ du tableau croisé dynamique n'est pas valide. Pour créer un tableau croisé dynamique, vous devez utiliser des données organisées sous forme de liste avec des colonnes étiquetées. Si vous modifiez le nom d'un champ Tableau croisé dynamique, vous devez saisir un nouveau nom pour ce champ."),
                (b.PivotTableErrorMessage_Overlap = "Un rapport de tableau croisé dynamique ne peut pas chevaucher un autre rapport de tableau croisé dynamique."),
                (b.PivotTableErrorMessage_InvalidChange = "Nous ne pouvons pas changer cette partie du tableau croisé dynamique."),
                (b.PivotTableErrorMessage_InvalidGroup = "Impossible de regrouper cette sélection."),
                (b.PivotTableErrorMessage_InvalidReference = "La référence n'est pas valide."),
                (b.PivotTableForAccessibility = "Tableau croisé dynamique : \r\nNom du tableau croisé dynamique"),
                (b.PivotTableCalcItemHasTowCacheField =
                    "If one or more fields in the PivotTable have calculated items, no fields can be used in the data area tow or more times, or in the data area and another area at the same time. If you are trying to add a field, remove the calculated items and add the field again. If you are trying to add a calculated item, change the PivotTable report so that no field is used more than once and than add the calculated item."),
                (b.PivotTableHasSameCalcItemName = "Calculated item or field could not be created because another item or field of the same name exists"),
                (b.PivotTableHasNumberOrDateGroup =
                    "This PivotTable report field is grouped, You cannot add a calculated item to a grouped field. To ungroup the field, make sure it is in the row or column area, select one of the items of the grouped field, click the Ungroup button in the Group group on the Analyze tab, and then insert the calculated item, After inserted, you can group the items of the field again."),
                (b.PivotTableSubtotalType = "Averages, standard deviations, and variances are not supported when a PivotTable report has calculated items."),
                (b.PivotTableHasSameItemName = "Calculated item or field could not be created because another item or field of the same name exists."),
                (b.PivotTableCalcItemHasMultipleDataField = "Multiple data Fields of the same field are not supported when a PivotTable report has calculated items."),
                (b.PivotTableMoveCalcItemFieldToReport = "This field cannot be placed in the report filter because it contains calculated items.To place this field in the report filter,first delete the calculated items."),
                (b.PivotTableErrorFormula = "An item name cannot be found. Check that you've typed the name correctly and the item is present in the PivotTable report."),
                (b.SlicerNameInFormula = "Slicer"),
                (b.search = "Search"),
                (b.AddSearchResult = "Add current selection to filter"),
                (b.Layout = "Layout"),
                (b.showNoData = "Show items with no data"),
                (b.TIMELINE_PLACE_HOLDER = "{TL}"),
                (b.ALL_DATES_IN = "All dates in "),
                (b.ALL_PERIODS = "All Periods"),
                (b.INVALID_DATE_SELECTION = "Invalid Date Selection!"),
                (b.QUARTER_MAP = ["", b.Q1, b.Q2, b.Q3, b.Q4]),
                (b.DateNotEqual = "Not " + b.TIMELINE_PLACE_HOLDER),
                (b.DateNewerThan = "After " + b.TIMELINE_PLACE_HOLDER),
                (b.DateNewerThanOrEqual = "After or on " + b.TIMELINE_PLACE_HOLDER),
                (b.DateOlderThan = "Before " + b.TIMELINE_PLACE_HOLDER),
                (b.DateOlderThanOrEqual = "Before or on" + b.TIMELINE_PLACE_HOLDER),
                (b.DateNotBetween = "Not Between " + b.TIMELINE_PLACE_HOLDER),
                (b.AllDatesIn_Quarter1 = b.ALL_DATES_IN + b.Q1),
                (b.AllDatesIn_Quarter2 = b.ALL_DATES_IN + b.Q2),
                (b.AllDatesIn_Quarter3 = b.ALL_DATES_IN + b.Q3),
                (b.AllDatesIn_Quarter4 = b.ALL_DATES_IN + b.Q4),
                (b.AllDatesIn_January = b.ALL_DATES_IN + b.Jan),
                (b.AllDatesIn_February = b.ALL_DATES_IN + b.Feb),
                (b.AllDatesIn_March = b.ALL_DATES_IN + b.Mar),
                (b.AllDatesIn_April = b.ALL_DATES_IN + b.Apr),
                (b.AllDatesIn_May = b.ALL_DATES_IN + b.May),
                (b.AllDatesIn_June = b.ALL_DATES_IN + b.Jun),
                (b.AllDatesIn_July = b.ALL_DATES_IN + b.Jul),
                (b.AllDatesIn_August = b.ALL_DATES_IN + b.Aug),
                (b.AllDatesIn_September = b.ALL_DATES_IN + b.Sep),
                (b.AllDatesIn_October = b.ALL_DATES_IN + b.Oct),
                (b.AllDatesIn_November = b.ALL_DATES_IN + b.Nov),
                (b.AllDatesIn_December = b.ALL_DATES_IN + b.Dec),
                (b.TIME_LEVEL_YEARS = "YEARS"),
                (b.TIME_LEVEL_QUARTERS = "QUARTERS"),
                (b.TIME_LEVEL_MONTHS = "MONTHS"),
                (b.TIME_LEVEL_DAYS = "DAYS"),
                (b.PivotTableErrorMessage_ExistTable ="A PivotTable report cannot overlap a table.");
            },
            "./dist/plugins/print/print.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }), (b.Exp_InvalidSheetIndex = "Index des feuilles non valables.");
            },
            "./dist/plugins/shape/shape.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_InvalidConnectionSite = 'Site de connexion invalide.'),
                    (b.Exp_DuplicatedName = "Nom dupliquée."),
                    (b.Exp_EmptyName = "Nom vide."),
                    (b.Exp_InvalidRange = 'Invalid range');
            },
            "./dist/plugins/slicer/slicer.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Blank = "(blank)"),
                    (b.Exp_SlicerNameInvalid = 'Le nom du séparateur n\'est pas valable.'),
                    (b.Exp_SlicerNameExist = 'Le nom du séparateur est déjà utilisé ; veuillez saisir un nom unique.'),
                    (b.SlicerNameInFormula = "Slicer");
            },
            "./dist/plugins/statusBar/statusBar.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.cellMode = 'Cellule type'),
                    (b.cellModeReady = 'Prêt'),
                    (b.cellModeEnter = 'Entrer'),
                    (b.cellModeEdit = 'Editer'),
                    (b.formulaAverage = 'Moyenne'),
                    (b.formulaCount = 'Compte'),
                    (b.formulaNumericalCount = 'Compte numérique'),
                    (b.formulaMin = 'Min'),
                    (b.formulaMax = 'Max'),
                    (b.formulaSum = 'Somme'),
                    (b.zoomSlider = 'Zoom portionneuse'),
                    (b.zoom = 'Zoom'),
                    (b.toolTipCellMode = 'Dans {0} mode'),
                    (b.toolTipFormulaAverage = 'Moyenne des cellules sélectionnées'),
                    (b.toolTipFormulaCount = 'Nombre de cellules sélectionnées qui contiennent des données'),
                    (b.toolTipFormulaNumericalCount = 'Nombre de cellules sélectionnées qui contiennent des données numériques'),
                    (b.toolTipFormulaMin = 'Valeur minimale dans la sélection'),
                    (b.toolTipFormulaMax = 'Valeur maximale dans la sélection'),
                    (b.toolTipFormulaSum = 'Somme des cellules sélectionnées'),
                    (b.toolTipZoomOut = 'Zoom arrière'),
                    (b.toolTipZoomIn = 'Zoom avant'),
                    (b.toolTipSlider = 'Zoom'),
                    (b.toolTipZoomPanel = 'Niveau de zoom'),
                    (b.progressItem = "Progress");
            },
            "./dist/plugins/table/table.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.Exp_DragDropShiftTableCell = 'Cette opération n\'est pas autorisée. L\'opération consiste à tenter de déplacer des cellules dans un tableau de votre feuille de calcul.'),
                    (b.Exp_DragDropChangePartOfTable = 'Impossible de terminer l\'opération : Vous essayez de modifier une partie d\'une ligne ou d\'une colonne du tableau d\'une manière qui n\'est pas autorisée.'),
                    (b.Exp_TableEmptyNameError = 'Le nom de la table ne peut pas être vide.'),
                    (b.Exp_TableNameInvalid = 'Le nom de la table n\'est pas valide.'),
                    (b.Exp_TableInvalidRow = 'Index de ligne ou nombre de lignes invalide.'),
                    (b.Exp_TableInvalidColumn = 'Index de colonne ou nombre de colonnes non valable.'),
                    (b.Exp_TableIntersectError = 'Les tableaux ne peuvent pas être croisés.'),
                    (b.Exp_TableHasSameNameError = 'La feuille de travail actuelle existe déjà dans un tableau du même nom.'),
                    (b.Exp_TableRangeHasFilterError = "The current table range contains a filter range."),
                    (b.Exp_TableDataSourceNullError = 'La source des données du tableau ne peut être nulle.'),
                    (b.Exp_TableMoveOutOfRange = 'Le tableau ne peut pas être déplacé hors de la feuille.'),
                    (b.Exp_TableResizeOutOfRange = 'Le nombre de lignes, de colonnes et de tableaux non valables ne peut pas être redimensionné à partir de la feuille.'),
                    (b.Exp_ArrayFormulaTable = 'Les formules de tableaux multi-cellules ne sont pas autorisées dans les tableaux.'),
                    (b.Exp_TableResizeInvalidRange = 'Les en-têtes doivent rester sur la même ligne, et la plage de tableau résultante doit chevaucher la plage de tableau originale.'),
                    (b.Exp_TableResizeToSpan = 'Impossible de terminer l\'opération : un tableau ne peut pas chevaucher un tableau ou des cellules fusionnées.'),
                    (b.Exp_TableResizeWithFilter = 'Le déplacement de cellules dans une plage ou un tableau filtré est interdit.'),
                    (b.Exp_TableResizeWithHidden = "Le redimensionnement d'un tableau qui est adjacent à une ligne ou une colonne cachée est interdit."),
                    (b.Exp_TableResizeToTable = 'Impossible de terminer l\'opération : Les opérations qui incluent des cellules à la fois à l\'intérieur et à l\'extérieur d\'une plage de tableaux, et les opérations qui affectent des cellules qui chevauchent plusieurs tableaux ne sont pas autorisées.'),
                    (b.Exp_RowParamOutOfRange = 'La ligne param hors de la plage de données du tableau.'),
                    (b.Exp_ColParamOutOfRange = 'Le param col hors de la plage de données du tableau.'),
                    (b.Exp_TableDeleteCountInvalid = 'Le nombre de paramètres à supprimer entraînera un tableau vide.'),
                    (b.Exp_TableAddRowIntersectSpan = "Cela ne fonctionnera pas car cela déplacerait les cellules de votre feuille de travail d'un bout à l'autre."),
                    (b.Exp_TableAddRowIntersectTable = "Cela ne fonctionnera pas car cela déplacerait des cellules dans un tableau de votre feuille de travail."),
                    (b.Exp_TableAddRowNoEnoughRoom = 'Impossible d\'insérer de nouvelles cellules car cela pousserait les cellules non vides de la fin de la feuille de calcul. Ces cellules peuvent sembler vides mais peuvent avoir des valeurs vides, un certain format ou une formule. Supprimez suffisamment de lignes ou de colonnes pour faire de la place à ce que vous voulez insérer, puis réessayez.'),
                    (b.Table_Total = 'Total'),
                    (b.Table_None = 'Aucun'),
                    (b.Table_Average = 'Moyenne'),
                    (b.Table_Count = 'Compte'),
                    (b.Table_Count_Numbers = 'Compte nombre'),
                    (b.Table_Max = 'Max'),
                    (b.Table_Min = 'Min'),
                    (b.Table_Sum = 'Somme'),
                    (b.Table_StdDev = 'DevStd'),
                    (b.Table_Var = 'Var');
            },
            "./dist/plugins/tableSheet/tableSheet.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                (b.EXP_TooManyPinRecords = "Ne prend en charge que les enregistrements de moins de 10 épingles."),
                (b.GroupPanelTip = "Drag here to set row groups"),
                (b.GroupPanelFieldsHeader = "Fields"),
                (b.GroupPanelGroupsHeader = "Groups"),
                (b.GroupPanelItemRemove = "Remove"),
                (b.GroupPanelItemAddCalculation = "Add Summary Field"),
                (b.GroupPanelDropDownCalcField = "Field"),
                (b.GroupPanelSummaryLabelFormula = "Formula"),
                (b.GroupPanelSummaryLabelCaption = "Caption"),
                (b.GroupPanelSummaryLabelSlice = "Slice"),
                (b.GroupPanelItemRemoveAll = "Remove All"),
                (b.GroupPanelAddCalculateColumn = "Add Calculate Column"),
                (b.StatusBarRowCount = "Row Count"),
                (b.StatusBarToolTipRowCount = "Count of selected rows"),
                (b.CrossColumnCrossHeader = "Cross"),
                (b.CrossColumnDetailFormatter = "Formatter"),
                (b.CrossColumnDetailName = "Name"),
                (b.CrossColumnDetailValue = "Value"),
                (b.CrossColumnDetailValuePlaceHolder = "Drag item here to set value"),
                (b.CrossColumnDetailOver = "Over"),
                (b.CrossColumnDetailCaption = "Caption"),
                (b.CrossColumnDetailValueHeader = "Show Cross Value Header"),
                (b.CrossColumnDetailFilter = "Filter"),
                (b.CrossColumnDetailAttributes = "Attributes"),
                (b.CrossColumnDetailList = "List"),
                (b.Exp_InvalidOperationInProtectForTableSheet = "The range you're trying to change is locked.");
            },
            "./dist/plugins/touch/touch.res.fr.js": function (a, b, c) {
                "use strict";
                Object.defineProperty(b, "__esModule", { value: !0 }),
                    (b.ToolStrip_PasteText = 'Coller'),
                    (b.ToolStrip_CutText = 'Couper'),
                    (b.ToolStrip_CopyText = 'Copier'),
                    (b.ToolStrip_AutoFillText = 'remplissageAuto');
            },
            "./node_modules_local/@grapecity/js-calc/dist/gc.spread.calcengine.resources.fr.js": function (a, b) {
                var c = "object" == typeof c ? c : {};
                (c.Spread = c.Spread || {}),
                    (c.Spread.CalcEngine = (function (a) {
                        var b = {};
                        function c(d) {
                            if (b[d]) return b[d].exports;
                            var e = (b[d] = { i: d, l: !1, exports: {} });
                            return a[d].call(e.exports, e, e.exports, c), (e.l = !0), e.exports;
                        }
                        return (
                            (c.m = a),
                            (c.c = b),
                            (c.d = function (a, b, d) {
                                c.o(a, b) || Object.defineProperty(a, b, { enumerable: !0, get: d });
                            }),
                            (c.r = function (a) {
                                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(a, "__esModule", { value: !0 });
                            }),
                            (c.t = function (a, b) {
                                var d, e;
                                if ((1 & b && (a = c(a)), 8 & b)) return a;
                                if (4 & b && "object" == typeof a && a && a.__esModule) return a;
                                if (((d = Object.create(null)), c.r(d), Object.defineProperty(d, "default", { enumerable: !0, value: a }), 2 & b && "string" != typeof a))
                                    for (e in a)
                                        c.d(
                                            d,
                                            e,
                                            function (b) {
                                                return a[b];
                                            }.bind(null, e)
                                        );
                                return d;
                            }),
                            (c.n = function (a) {
                                var b =
                                    a && a.__esModule
                                        ? function b() {
                                            return a.default;
                                        }
                                        : function b() {
                                            return a;
                                        };
                                return c.d(b, "a", b), b;
                            }),
                            (c.o = function (a, b) {
                                return Object.prototype.hasOwnProperty.call(a, b);
                            }),
                            (c.p = "/assets/"),
                            c((c.s = "./src/resource.fr.entry.ts"))
                        );
                    })({
                        "./src/calcEngine.res.fr.ts": function (a, b, c) {
                            "use strict";
                            var x,y,zf,zg,zh;
                            Object.defineProperty(b, "__esModule", { value: !0 });
                            function d(a, b) {
                                return { description: a, parameters: b };
                            }
                            function e(a, b) {
                                return { name: a, repeatable: b };
                            }
                            (x = "[start_num]"),
                            (y = "[significance]"),
                            (zf = "[match_mode]"),
                            (zg = "[if_not_found]"),
                            (zh = "[pad_with]"),
                            (b.resource = {
                                Exp_InvalidCast: 'Erreur d\'appel invalide',
                                Exp_FormulaInvalidChar: 'La formule contient un caractère non valide : \'{0}\' à l\'index sur {1}',
                                Exp_FormulaInvalid: 'Formule Invalide ',
                                Exp_InvalidFunctionName: 'Nom de fonction invalide',
                                Exp_InvalidOverrideFunction: 'Réécriture d\'une fonction intégrée impossible',
                                Exp_InvalidArray: 'Tableau invalide',
                                Exp_OverrideNotAllowed: 'Tentative d\'annulation d\'une fonction alors que l\'annulation n\'est pas autorisée',
                                Exp_NoSyntax: 'Pas de syntaxe  \'{0}\' pour correspondre à la syntaxe \'{1}\'.',
                                Exp_IsValid: '\'{0}\' est invalide.',
                                Exp_InvalidParameters: 'Paramètre de fonction invalide à {0}.',
                                Exp_InvalidArrayColumns: 'La longueur des colonnes du tableau n\'est pas égale à {0}..',
                                Exp_ExprIsNull: 'L\'argument \'expr\' est nul',
                                Exp_InvalidOperation: 'Erreur d\'opération non valable',
                                Exp_ArgumentNull: 'erreur d\'Argument Nul',
                                Exp_CriteriaIsNull: 'Le critère est nul',
                                Exp_Format: 'Format',
                                Exp_ArrayFormulaPart: 'Ne peut pas changer une partie d\'un tableau.',
                                Exp_NotSupported: 'Exception non supportée',
                                Fbx_Summary: 'Sommaire',
                                Fbx_TableName_Description: 'Nom de la table pour ',
                                Fbx_TableSheetName_Description: 'Nom de la feuille de table pour ',
                                Fbx_CustomName_Description: 'Nom personnalisé pour ',
                                Exp_DuplicatedChar: "Duplicated Character",
                                Exp_ArgumentOutOfRangeException: "Argument Out Of Range Exception",
                                Exp_ArgumentException: "Argument Exception",
                                _h: {
                                    'ABS': d('Cette fonction calcule la valeur absolue de la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'ACCRINT': d('Cette fonction calcule les intérêts courus pour un titre qui paie des intérêts périodiques.', [
                                        e('émission'),
                                        e('premier_coupon'),
                                        e('liquidation'),
                                        e('taux'),
                                        e('par'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'ACCRINTM': d('Cette fonction calcule les intérêts courus à l\'échéance pour un titre qui paie des intérêts périodiques.', [
                                        e('émission'),
                                        e('échéance'),
                                        e('taux'),
                                        e('par'),
                                        e('base')
                                    ]),
                                    'ACOS': d('Cette fonction calcule l\'arccosine, c\'est-à-dire l\'angle dont le cosinus est la valeur spécifiée.', [
                                        e('nombre')
                                    ]),
                                    'ACOSH': d('Cette fonction calcule le cosinus hyperbolique inverse de la valeur spécifiée.', [
                                        e('nombre')
                                    ]),
                                    'ADDRESS': d('Cette fonction utilise les numéros de ligne et de colonne pour créer une adresse de cellule dans le texte.', [
                                        e('ligne'),
                                        e('colonne'),
                                        e('abs_num'),
                                        e('a1style'),
                                        e('sheet_text')
                                    ]),
                                    'AGGREGATE': d('Cette fonction permet d\'agréger une liste de numéros en utilisant une fonction intégrée spécifique.', [
                                        e('function_numéro'),
                                        e('options'),
                                        e('ref1'),
                                        e('ref2', true)
                                    ]),
                                    'AMORDEGRC': d('Cette fonction retourne l\'amortissement pour une période comptable, en tenant compte de l\'amortissement au prorata, et applique un coefficient d\'amortissement dans le calcul basé sur la durée de vie des actifs.', [
                                        e('coût'),
                                        e('date_achat'),
                                        e('première_période'),
                                        e('récupération'),
                                        e('période'),
                                        e('drate'),
                                        e('base')
                                    ]),
                                    'AMORLINC': d('Cette fonction calcule l\'amortissement pour une période comptable, en tenant compte de l\'amortissement au prorata.', [
                                        e('coût'),
                                        e('date_achat'),
                                        e('première_période'),
                                        e('récupération'),
                                        e('période'),
                                        e('drate'),
                                        e('base')
                                    ]),
                                    'AND': d('Vérifier si tous les arguments sont vrais, et renvoie True si tous les arguments sont vrais.', [
                                        e('logique1'),
                                        e('logique2')
                                    ]),
                                    'ASIN': d('Cette fonction calcule l\'arcsinus, c\'est-à-dire l\'angle dont le sinus est la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'ASINH': d('Cette fonction calcule le sinus hyperbolique inverse d\'un nombre.', [
                                        e('valeur')
                                    ]),
                                    'ATAN': d('Cette fonction calcule l\'arctangente, c\'est-à-dire l\'angle dont la tangente est la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'ATAN2': d('Cette fonction calcule l\'arctangente des coordonnées x et y spécifiées.', [
                                        e('x'),
                                        e('y')
                                    ]),
                                    'ATANH': d('Cette fonction calcule la tangente hyperbolique inverse d\'un nombre.', [
                                        e('valeur')
                                    ]),
                                    'AVEDEV': d('Cette fonction calcule la moyenne des écarts absolus des valeurs spécifiées par rapport à leur moyenne.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'AVERAGE': d('Cette fonction calcule la moyenne des valeurs numériques spécifiées.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'AVERAGEA': d('Cette fonction calcule la moyenne des valeurs spécifiées, y compris les valeurs textuelles ou logiques ainsi que les valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'AVERAGEIF': d('Cette fonction calcule la moyenne des valeurs numériques spécifiées pour autant qu\'elles répondent aux critères spécifiés.', [
                                        e('valeur1'),
                                        e('valeur2', true),
                                        e('condition')
                                    ]),
                                    'AVERAGEIFS': d('Cette fonction calcule la moyenne de toutes les cellules qui répondent à plusieurs critères spécifiés.', [
                                        e('valeur1'),
                                        e('condition1'),
                                        e('valeur2', true),
                                        e('condition2', true)
                                    ]),
                                    'BESSELI': d('Cette fonction calcule la fonction de Bessel modifiée du premier type évaluée pour des arguments purement imaginaires.', [
                                        e('valeur'),
                                        e('ordre')
                                    ]),
                                    'BESSELJ': d('Cette fonction calcule la fonction de Bessel du premier type.', [
                                        e('valeur'),
                                        e('ordre')
                                    ]),
                                    'BESSELK': d('Cette fonction calcule la fonction de Bessel modifiée du second type évaluée pour des arguments purement imaginaires.', [
                                        e('valeur'),
                                        e('ordre')
                                    ]),
                                    'BESSELY': d('Cette fonction calcule la fonction de Bessel du second type.', [
                                        e('valeur'),
                                        e('ordre')
                                    ]),
                                    'BETADIST': d('Cette fonction calcule la fonction de distribution bêta cumulative.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('dessous'),
                                        e('dessus')
                                    ]),
                                    'BETAINV': d('Cette fonction calcule l\'inverse de la fonction de distribution bêta cumulative.', [
                                        e('probabilité'),
                                        e('alpha'),
                                        e('beta'),
                                        e('dessous'),
                                        e('dessus')
                                    ]),
                                    'BIN2DEC': d('Cette fonction convertit un nombre binaire en un nombre décimal', [
                                        e('nombre')
                                    ]),
                                    'BIN2HEX': d('Cette fonction convertit un nombre binaire en un nombre hexadécimal.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'BIN2OCT': d('Cette fonction convertit un nombre binaire en un nombre octal.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'BINOMDIST': d('Cette fonction calcule la probabilité de distribution binomiale des termes individuels.', [
                                        e('number_s'),
                                        e('trials'),
                                        e('probability_s'),
                                        e('cumulé')
                                    ]),
                                    'CEILING': d('Cette fonction permet d\'arrondir un nombre au multiple le plus proche d\'une valeur donnée.', [
                                        e('valeur'),
                                        e('significance')
                                    ]),
                                    'CHAR': d('Cette fonction renvoie le caractère spécifié par un nombre.', [
                                        e('valeur')
                                    ]),
                                    'CHIDIST': d('Cette fonction calcule la probabilité unilatérale de la distribution du chi carré.', [
                                        e('valeur'),
                                        e('deg_freedom')
                                    ]),
                                    'CHIINV': d('Cette fonction calcule l\'inverse de la probabilité unilatérale de la distribution du chi carré', [
                                        e('probabilité'),
                                        e('deg_freedom')
                                    ]),
                                    'CHITEST': d('Cette fonction calcule le test d\'indépendance par rapport à la distribution chi carré.', [
                                        e('obs_tableau'),
                                        e('exp_tableau')
                                    ]),
                                    'CHOOSE': d('Cette fonction renvoie une valeur à partir d\'une liste de valeurs.', [
                                        e('index'),
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'CLEAN': d('Cette fonction permet de supprimer tous les caractères non imprimables du texte.', [
                                        e('texte')
                                    ]),
                                    'CODE': d('Cette fonction renvoie un code numérique qui représente le premier caractère d\'une chaîne de texte. Le code renvoyé correspond au jeu de caractères Windows (ANSI).', [
                                        e('texte')
                                    ]),
                                    'COLUMN': d('Cette fonction renvoie le numéro de colonne d\'une référence.', [
                                        e('référence')
                                    ]),
                                    'COLUMNS': d('Cette fonction renvoie le nombre de colonnes dans un tableau.', [
                                        e('tableau')
                                    ]),
                                    'COMBIN': d('Cette fonction calcule le nombre de combinaisons possibles pour un nombre déterminé d\'articles.', [
                                        e('k'),
                                        e('nombre_choisi')
                                    ]),
                                    'COMPLEX': d('Cette fonction convertit les coefficients réels et imaginaires en un nombre complexe.', [
                                        e('coeff_réel'),
                                        e('coeff_imag'),
                                        e('suffix')
                                    ]),
                                    'CONCATENATE': d('Cette fonction permet de combiner plusieurs chaînes de texte ou des chiffres en une seule chaîne de texte.', [
                                        e('texte1'),
                                        e('texte2', true)
                                    ]),
                                    'CONFIDENCE': d('Cette fonction renvoie l\'intervalle de confiance pour une moyenne de population.', [
                                        e('alpha'),
                                        e('dev_st'),
                                        e('taille')
                                    ]),
                                    'CONVERT': d('Cette fonction permet de convertir un nombre d\'un système de mesure en son équivalent dans un autre système de mesure.', [
                                        e('nombre'),
                                        e('unité_départ'),
                                        e('unité_arrivée')
                                    ]),
                                    'CORREL': d('Cette fonction renvoie le coefficient de corrélation des deux ensembles de données.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'COS': d('Cette fonction renvoie le cosinus de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'COSH': d('Cette fonction renvoie le cosinus hyperbolique de la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'COUNT': d('Cette fonction renvoie le nombre de cellules qui contiennent des nombres.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'COUNTA': d('Cette fonction renvoie le nombre de cellules qui contiennent des chiffres, du texte ou des valeurs logiques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'COUNTBLANK': d('Cette fonction renvoie le nombre de cellules vides (ou vierges) dans une série de cellules sur une feuille.', [
                                        e('plage_cellule')
                                    ]),
                                    'COUNTIF': d('Cette fonction renvoie le nombre de cellules qui remplissent une certaine condition', [
                                        e('plage_cellule'),
                                        e('condition')
                                    ]),
                                    'COUNTIFS': d('Cette fonction renvoie le nombre de cellules qui répondent à plusieurs conditions.', [
                                        e('plage_cellule', true),
                                        e('condition', true)
                                    ]),
                                    'COUPDAYBS': d('Cette fonction calcule le nombre de jours entre le début de la période de coupon et la date de règlement.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COUPDAYS': d('Cette fonction renvoie le nombre de jours de la période du coupon qui contient la date de règlement.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COUPDAYSNC': d('Cette fonction calcule le nombre de jours entre la date de règlement et la date du coupon suivant.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COUPNCD': d('Cette fonction renvoie un numéro de date de la prochaine date de coupon après la date de règlement.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COUPNUM': d('Cette fonction renvoie le nombre de coupons dus entre la date de règlement et la date d\'échéance.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COUPPCD': d('Cette fonction renvoie un numéro de date du coupon précédent avant la date de règlement.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'COVAR': d('Cette fonction renvoie la covariance, qui est la moyenne des produits des écarts pour chaque paire de points de données dans deux ensembles de nombres.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'CRITBINOM': d('Cette fonction renvoie le critère binomial, la plus petite valeur pour laquelle la distribution binomiale cumulative est supérieure ou égale à une valeur de critère.', [
                                        e('trials'),
                                        e('probability_s'),
                                        e('alpha')
                                    ]),
                                    'CUMIPMT': d('Cette fonction retourne les intérêts cumulés payés sur un prêt entre les périodes de début et de fin.', [
                                        e('taux'),
                                        e('nper'),
                                        e('pval'),
                                        e('période_début'),
                                        e('période_fin'),
                                        e('paytype')
                                    ]),
                                    'CUMPRINC': d('Cette fonction retourne le capital cumulé payé sur un prêt entre les périodes de début et de fin.', [
                                        e('taux'),
                                        e('nper'),
                                        e('pval'),
                                        e('période_début'),
                                        e('période_fin'),
                                        e('paytype')
                                    ]),
                                    'DATE': d('Cette fonction renvoie l\'objet DateTime pour une date particulière, spécifiée par l\'année, le mois et le jour.', [
                                        e('année'),
                                        e('mois'),
                                        e('jour')
                                    ]),
                                    'DATEDIF': d('Cette fonction renvoie le nombre de jours, de mois ou d\'années entre deux dates.', [
                                        e('date_début'),
                                        e('date_fin'),
                                        e('code_sortie')
                                    ]),
                                    'DATEVALUE': d('Cette fonction renvoie un objet DateTime de la date spécifiée.', [
                                        e('date_texte')
                                    ]),
                                    'DAVERAGE': d('Cette fonction calcule la moyenne des valeurs dans une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DAY': d('Cette fonction renvoie le numéro du jour du mois (entier de 1 à 31) qui correspond à la date spécifiée.', [
                                        e('date')
                                    ]),
                                    'DAYS360': d('Cette fonction renvoie le nombre de jours entre deux dates sur la base d\'une année de 360 jours.', [
                                        e('date_début'),
                                        e('date_fin'),
                                        e('method')
                                    ]),
                                    'DB': d('Cette fonction calcule l\'amortissement d\'un actif pour une période déterminée en utilisant la méthode de l\'amortissement dégressif fixe pour \u2011', [
                                        e('coût'),
                                        e('récupération'),
                                        e('vie'),
                                        e('période'),
                                        e('month')
                                    ]),
                                    'DCOUNT': d('Cette fonction compte les cellules qui contiennent des numéros dans une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DCOUNTA': d('Cette fonction compte les cellules non vierges dans une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DDB': d('Cette fonction calcule l\'amortissement d\'un actif pour une période déterminée en utilisant la méthode du double amortissement dégressif ou une autre méthode que vous spécifiez.', [
                                        e('coût'),
                                        e('récupération'),
                                        e('vie'),
                                        e('période'),
                                        e('factor')
                                    ]),
                                    'DEC2BIN': d('Cette fonction convertit un nombre décimal en un nombre binaire.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'DEC2HEX': d('Cette fonction convertit un nombre décimal en un nombre hexadécimal', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'DEC2OCT': d('Cette fonction convertit un nombre décimal en un nombre octal ', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'DEGREES': d('Cette fonction convertit la valeur spécifiée de radians en degrés', [
                                        e('angle')
                                    ]),
                                    'DELTA': d('Cette fonction permet de déterminer si deux valeurs sont égales. Elle renvoie 1 si elles sont égales ; sinon, elle renvoie 0.', [
                                        e('valeur1'),
                                        e('valeur2')
                                    ]),
                                    'DEVSQ': d('Cette fonction calcule la somme des carrés des écarts des points de données (ou d\'un ensemble de points de données) par rapport à leur moyenne d\'échantillon.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'DGET': d('Cette fonction extrait une valeur unique d\'une colonne d\'une liste ou d\'une base de données qui correspond aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DISC': d('Cette fonction permet de calculer le taux d\'actualisation d\'un titre.', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('prix'),
                                        e('valeur_échéance'),
                                        e('base')
                                    ]),
                                    'DMAX': d('Cette fonction renvoie le plus grand nombre dans une colonne d\'une liste ou d\'une base de données qui correspond aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DMIN': d('Cette fonction renvoie le plus petit nombre dans une colonne d\'une liste ou d\'une base de données qui correspond aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DOLLAR': d('Cette fonction convertit un nombre en texte en utilisant le format monétaire, les décimales étant arrondies à l\'endroit indiqué.', [
                                        e('nombre'),
                                        e('décimal')
                                    ]),
                                    'DOLLARDE': d('Cette fonction convertit une fraction de prix en dollars en un prix décimal en dollars.', [
                                        e('fractional_dollar'),
                                        e('fraction')
                                    ]),
                                    'DOLLARFR': d('Cette fonction convertit un nombre décimal de prix en dollars en une fraction de prix en dollars.', [
                                        e('decimal_dollar'),
                                        e('fraction')
                                    ]),
                                    'DPRODUCT': d('Cette fonction multiplie les valeurs dans une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DSTDEV': d('Cette fonction estime l\'écart-type d\'une population basée sur un échantillon en utilisant les chiffres d\'une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DSTDEVP': d('Cette fonction calcule l\'écart-type d\'une population sur la base de l\'ensemble de la population en utilisant les chiffres d\'une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DSUM': d('Cette fonction ajoute les numéros dans une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DURATION': d('Cette fonction renvoie la durée de Macaulay pour une valeur nominale supposée de 100.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('coupon'),
                                        e('rendement'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'DVAR': d('Cette fonction estime la variance d\'une population basée sur un échantillon en utilisant les chiffres d\'une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'DVARP': d('Cette fonction calcule la variance d\'une population sur la base de l\'ensemble de la population en utilisant les chiffres d\'une colonne d\'une liste ou d\'une base de données qui correspondent aux conditions spécifiées.', [
                                        e('database'),
                                        e('champs'),
                                        e('critère')
                                    ]),
                                    'EDATE': d('Cette fonction calcule la date qui est le nombre de mois indiqué avant ou après une date donnée.', [
                                        e('date_début'),
                                        e('mois')
                                    ]),
                                    'EFFECT': d('Cette fonction calcule le taux d\'intérêt annuel effectif pour un taux d\'intérêt annuel nominal donné et le nombre de périodes de composition par an.', [
                                        e('taux_nominal'),
                                        e('composition')
                                    ]),
                                    'EOMONTH': d('Cette fonction calcule la date du dernier jour du mois (fin de mois), c\'est-à-dire le nombre de mois indiqué avant ou après la date de début.', [
                                        e('date_début'),
                                        e('mois')
                                    ]),
                                    'ERF': d('Cette fonction calcule la fonction d\'erreur intégrée entre une limite inférieure et une limite supérieure.', [
                                        e('limite_basse'),
                                        e('limite_haute')
                                    ]),
                                    'ERFC': d('Cette fonction calcule la fonction d\'erreur complémentaire intégrée entre une limite inférieure et l\'infini.', [
                                        e('limite_basse')
                                    ]),
                                    'ERROR.TYPE': d('Cette fonction renvoie un nombre correspondant à l\'une des valeurs d\'erreur.', [
                                        e('valeur_erreur')
                                    ]),
                                    'EURO': d('Cette fonction renvoie l\'équivalent d\'un euro sur la base du code monétaire ISO.', [
                                        e('code')
                                    ]),
                                    'EUROCONVERT': d('Cette fonction convertit les devises d\'une monnaie membre de l\'euro (y compris les euros) en une autre monnaie membre de l\'euro (y compris les euros).', [
                                        e('devise'),
                                        e('source'),
                                        e('cible'),
                                        e('précision_max'),
                                        e('triangulation')
                                    ]),
                                    'EVEN': d('Cette fonction arrondit la valeur spécifiée à l\'entier pair le plus proche.', [
                                        e('valeur')
                                    ]),
                                    'EXACT': d('Cette fonction retourne vrai si deux chaînes sont identiques ; sinon, faux.', [
                                        e('texte1'),
                                        e('texte2')
                                    ]),
                                    'EXP': d('Cette fonction renvoie e élevé à la puissance de la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'EXPONDIST': d('Cette fonction renvoie la distribution exponentielle ou la densité de probabilité.', [
                                        e('valeur'),
                                        e('lambda'),
                                        e('cumulé')
                                    ]),
                                    'FACT': d('Cette fonction calcule la factorielle du nombre spécifié.', [
                                        e('nombre')
                                    ]),
                                    'FACTDOUBLE': d('Cette fonction calcule le double factoriel du nombre spécifié.', [
                                        e('nombre')
                                    ]),
                                    'FALSE': d('Cette fonction renvoie la valeur de FALSE logique .', []),
                                    'FDIST': d('Cette fonction calcule la distribution de probabilité F, pour voir les degrés de diversité entre deux ensembles de données.', [
                                        e('valeur'),
                                        e('deg_liberté1'),
                                        e('deg_liberté2')
                                    ]),
                                    'FIND': d('Cette fonction trouve une valeur de texte dans une autre et renvoie la position de la valeur de texte\u2019s dans le texte que vous avez recherché.', [
                                        e('texte_cherché'),
                                        e('texte'),
                                        e('départ')
                                    ]),
                                    'FINV': d('Cette fonction renvoie l\'inverse de la distribution de probabilité F.', [
                                        e('probabilité'),
                                        e('deg_liberté1'),
                                        e('deg_liberté2')
                                    ]),
                                    'FISHER': d('Cette fonction renvoie la transformation de Fisher pour une valeur donnée.', [
                                        e('valeur')
                                    ]),
                                    'FISHERINV': d('Cette fonction renvoie l\'inverse de la transformation de Fisher pour une valeur donnée.', [
                                        e('valeur')
                                    ]),
                                    'FIXED': d('Cette fonction arrondit un nombre au nombre de décimales spécifié, formate le nombre au format décimal en utilisant un point et des virgules (si cela est spécifié), et renvoie le résultat sous forme de texte.', [
                                        e('nombre'),
                                        e('décimal'),
                                        e('sans_virgule')
                                    ]),
                                    'FLOOR': d('Cette fonction permet d\'arrondir un nombre au multiple le plus proche d\'une valeur donnée.', [
                                        e('valeur'),
                                        e('importance')
                                    ]),
                                    'FORECAST': d('Cette fonction calcule une valeur future en utilisant les valeurs existantes.', [
                                        e('valeur'),
                                        e('Ytableau'),
                                        e('Xtableauy')
                                    ]),
                                    'FREQUENCY': d('Cette fonction calcule combien de fois les valeurs se produisent dans une plage de valeurs. Cette fonction renvoie un tableau vertical de nombres.', [
                                        e('tableau_donnée'),
                                        e('tableau_retour')
                                    ]),
                                    'FTEST': d('Cette fonction renvoie le résultat d\'un test F, qui indique la probabilité unilatérale que les variances dans deux tableaux ne soient pas significativement différentes.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'FV': d('Cette fonction restitue la valeur future d\'un investissement sur la base d\'une valeur actuelle, de versements périodiques et d\'un taux d\'intérêt déterminé.', [
                                        e('taux'),
                                        e('numper'),
                                        e('paymt'),
                                        e('pval'),
                                        e('type')
                                    ]),
                                    'FVSCHEDULE': d('Cette fonction restitue la valeur future d\'un capital initial après application d\'une série de taux d\'intérêt composés. Calculer la valeur future d\'un investissement à taux variable ou ajustable.', [
                                        e('principal'),
                                        e('calendrier')
                                    ]),
                                    'GAMMADIST': d('Cette fonction renvoie la distribution gamma.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('cumulé')
                                    ]),
                                    'GAMMAINV': d('Cette fonction renvoie l\'inverse de la distribution cumulative gamma.', [
                                        e('probabilité'),
                                        e('alpha'),
                                        e('beta')
                                    ]),
                                    'GAMMALN': d('Cette fonction renvoie le logarithme naturel de la fonction Gamma, G(x).', [
                                        e('valeur')
                                    ]),
                                    'GCD': d('Cette fonction renvoie le plus grand diviseur commun de deux nombres.', [
                                        e('nombre1'),
                                        e('nombre2')
                                    ]),
                                    'GEOMEAN': d('Cette fonction renvoie la moyenne géométrique d\'un ensemble de données positives.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'GESTEP': d('Cette fonction, supérieure ou égale à l\'échelon, renvoie une indication sur le fait qu\'un nombre est égal ou non à un seuil.', [
                                        e('nombre'),
                                        e('échelon')
                                    ]),
                                    'GROWTH': d('Cette fonction calcule la croissance exponentielle prévue. Cette fonction renvoie les valeurs y pour une série de nouvelles valeurs x qui sont spécifiées en utilisant les valeurs x et y existantes.', [
                                        e('y'),
                                        e('x'),
                                        e('x_nouveaux'),
                                        e('constante')
                                    ]),
                                    'HARMEAN': d('Cette fonction renvoie la moyenne harmonique d\'un ensemble de données.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'HEX2BIN': d('Cette fonction convertit un nombre hexadécimal en un nombre binaire.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'HEX2DEC': d('Cette fonction convertit un nombre hexadécimal en un nombre décimal.', [
                                        e('nombre')
                                    ]),
                                    'HEX2OCT': d('Cette fonction convertit un nombre hexadécimal en un nombre octal.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'HLOOKUP': d('Cette fonction recherche une valeur dans la ligne supérieure et renvoie ensuite une valeur dans la même colonne à partir d\'une ligne spécifiée.', [
                                        e('valeur_recherché'),
                                        e('tableau_table'),
                                        e('nombre_ligne_index'),
                                        e('plage_recherche')
                                    ]),
                                    'HOUR': d('Cette fonction renvoie l\'heure qui correspond à un moment précis.', [
                                        e('temps')
                                    ]),
                                    'HYPGEOMDIST': d('Cette fonction renvoie la distribution hypergéométrique.', [
                                        e('exemple_s'),
                                        e('nombre_exemple'),
                                        e('population_s'),
                                        e('nombre_pop')
                                    ]),
                                    'IF': d('Cette fonction effectue une comparaison et renvoie l\'une des deux valeurs fournies sur la base de cette comparaison.', [
                                        e('test_logique'),
                                        e('valeur_si_vrai'),
                                        e('valeur_si_faux')
                                    ]),
                                    'IFERROR': d('Cette fonction évalue une formule et retourne une valeur que vous fournissez s\'il y a une erreur ou le résultat de la formule.', [
                                        e('valeur'),
                                        e('valeur_si_erreur')
                                    ]),
                                    'IMABS': d('Cette fonction renvoie la valeur absolue ou le module d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMAGINARY': d('Cette fonction renvoie le coefficient imaginaire d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMARGUMENT': d('Cette fonction renvoie l\'argument thêta, qui est un angle exprimé en radians.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMCONJUGATE': d('Cette fonction renvoie le conjugué complexe d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMCOS': d('Cette fonction renvoie le cosinus d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMDIV': d('Cette fonction renvoie le quotient de deux nombres complexes.', [
                                        e('nombre_complexe'),
                                        e('complexdenom')
                                    ]),
                                    'IMEXP': d('Cette fonction renvoie l\'exponentielle d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMLN': d('Cette fonction renvoie le logarithme naturel d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMLOG2': d('Cette fonction renvoie le logarithme en base 2 d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMLOG10': d('Cette fonction renvoie le logarithme commun d\'un nombre complexe.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMPOWER': d('Cette fonction renvoie un nombre complexe élevé à une puissance.', [
                                        e('nombre_complexe'),
                                        e('nombre_puissance')
                                    ]),
                                    'IMPRODUCT': d('Cette fonction renvoie le produit de 29 nombres complexes au maximum dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe1'),
                                        e('nombre_complexe2', true)
                                    ]),
                                    'IMREAL': d('Cette fonction renvoie le coefficient réel d\'un nombre complexe dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSIN': d('Cette fonction renvoie le sinus d\'un nombre complexe dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSQRT': d('Cette fonction renvoie la racine carrée d\'un nombre complexe dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSUB': d('Cette fonction renvoie la différence de deux nombres complexes dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe1'),
                                        e('nombre_complexe2')
                                    ]),
                                    'IMSUM': d('Cette fonction renvoie la somme de deux ou plusieurs nombres complexes dans le format texte x+yi ou x+yj.', [
                                        e('nombre_complexe1'),
                                        e('nombre_complexe2', true)
                                    ]),
                                    'INDEX': d('Cette fonction renvoie une valeur ou la référence à une valeur à l\'intérieur d\'un tableau ou d\'une plage.', [
                                        e('tableau'),
                                        e('numéro_ligne'),
                                        e('numéro_colonne'),
                                        e('numéro_zone')
                                    ]),
                                    'INDIRECT': d('Cette fonction renvoie la référence spécifiée par une chaîne de texte. Les références sont immédiatement évaluées pour afficher leur contenu.', [
                                        e('ref_texte'),
                                        e('a1_style')
                                    ]),
                                    'INT': d('Cette fonction arrondit un nombre donné à l\'entier inférieur le plus proche.', [
                                        e('valeur')
                                    ]),
                                    'INTERCEPT': d('Cette fonction renvoie les coordonnées d\'un point où une ligne coupe l\'axe des y, en utilisant les valeurs x et y existantes.', [
                                        e('dépendent'),
                                        e('indépendent')
                                    ]),
                                    'INTRATE': d('Cette fonction calcule le taux d\'intérêt pour un titre entièrement investi.', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('investment'),
                                        e('valeur_échéance'),
                                        e('base')
                                    ]),
                                    'IPMT': d('Cette fonction permet de calculer le paiement des intérêts d\'un prêt.', [
                                        e('taux'),
                                        e('per'),
                                        e('nper'),
                                        e('pval'),
                                        e('fval'),
                                        e('type')
                                    ]),
                                    'IRR': d('Cette fonction renvoie le taux de rendement interne pour une série de flux financiers représentés par les chiffres d\'un tableau.', [
                                        e('tableau_valeur'),
                                        e('estimation')
                                    ]),
                                    'ISBLANK': d('Cette fonction permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée est vide.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISERR': d('Cette fonction, Is Error Other Than Not Available, permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée présente une erreur autre que non disponible (#N/A).', [
                                        e('ref_cellule')
                                    ]),
                                    'ISERROR': d('Cette fonction, Is Error of Any Kind, vérifie si une valeur, une expression ou le contenu d\'une cellule référencée comporte une erreur de quelque nature que ce soit.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISEVEN': d('Cette fonction, Is Number Even, permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée est pair.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISLOGICAL': d('Cette fonction vérifie si une valeur, une expression ou le contenu d\'une cellule référencée est une valeur logique (booléenne).', [
                                        e('ref_cellule')
                                    ]),
                                    'ISNA': d('Cette fonction, "Non disponible", vérifie si une valeur, une expression ou le contenu d\'une cellule référencée a la valeur d\'erreur "non disponible" (#N/A).', [
                                        e('ref_cellule')
                                    ]),
                                    'ISNONTEXT': d('Cette fonction permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée possède un type de données autre que du texte.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISNUMBER': d('Cette fonction permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée comporte des données numériques.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISODD': d('Cette fonction, Is Number Odd, vérifie si une valeur, une expression ou le contenu d\'une cellule référencée comporte des données numériques.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISPMT': d('Cette fonction calcule les intérêts payés pendant une période spécifique d\'un investissement.', [
                                        e('taux'),
                                        e('per'),
                                        e('nper'),
                                        e('pv')
                                    ]),
                                    'ISREF': d('Cette fonction, Is Reference, permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée est une référence à une autre cellule.', [
                                        e('ref_cellule')
                                    ]),
                                    'ISTEXT': d('Cette fonction permet de vérifier si une valeur, une expression ou le contenu d\'une cellule référencée comporte des données textuelles.', [
                                        e('ref_cellule')
                                    ]),
                                    'KURT': d('Cette fonction renvoie l\'aplatissement d\'un ensemble de données.', [
                                        e('valeur1'),
                                        e('valeur2'),
                                        e('valeur3'),
                                        e('valeur4', true)
                                    ]),
                                    'LARGE': d('Cette fonction renvoie la nième plus grande valeur d\'un ensemble de données, où n est spécifié.', [
                                        e('tableau'),
                                        e('n')
                                    ]),
                                    'LCM': d('Cette fonction renvoie le plus petit multiple commun de deux nombres.', [
                                        e('nombre1'),
                                        e('nombre2')
                                    ]),
                                    'LEFT': d('Cette fonction renvoie les caractères les plus à gauche spécifiés à partir d\'une valeur de texte, et en fonction du nombre de caractères que vous spécifiez.', [
                                        e('texte'),
                                        e('nombre_caractères')
                                    ]),
                                    'LEN': d('Cette fonction renvoie la longueur du nombre de caractères d\'une chaîne de texte.', [
                                        e('texte')
                                    ]),
                                    'LINEST': d('Cette fonction permet de calculer les statistiques pour une ligne.', [
                                        e('y'),
                                        e('x'),
                                        e('constante'),
                                        e('statistiques')
                                    ]),
                                    'LN': d('Cette fonction renvoie le logarithme naturel du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'LOG': d('Cette fonction renvoie la base logarithmique Y d\'un nombre X.', [
                                        e('nombre'),
                                        e('base')
                                    ]),
                                    'LOG10': d('This function returns the logarithm base 10 of the given number..', [
                                        e('valeur')
                                    ]),
                                    'LOGEST': d('Cette fonction calcule une courbe exponentielle qui correspond aux données et renvoie un tableau de valeurs qui décrit la courbe.', [
                                        e('y'),
                                        e('x'),
                                        e('constante'),
                                        e('statistiques')
                                    ]),
                                    'LOGINV': d('Cette fonction renvoie l\'inverse de la fonction de distribution cumulative lognormale de x, où LN(x) est normalement distribué avec la moyenne et l\'écart-type spécifiés.', [
                                        e('probabilité'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'LOGNORMDIST': d('Cette fonction renvoie la distribution normale logarithmique cumulative de x, où LN(x) est normalement distribué avec la moyenne et l\'écart-type spécifiés. Analysez les données qui ont été transformées de façon logarithmique avec cette fonction.', [
                                        e('x'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'LOOKUP': d('Cette fonction recherche une valeur et renvoie une valeur du même endroit dans une deuxième zone.', [
                                        e('Valeur_recherchée'),
                                        e('Vecteur_recherchée'),
                                        e('Résultat')
                                    ]),
                                    'LOWER': d('Cette fonction convertit le texte en lettres minuscules.', [
                                        e('texte')
                                    ]),
                                    'MATCH': d('Cette fonction renvoie la position relative d\'un élément spécifié dans une fourchette.', [
                                        e('lookup_value'),
                                        e('lookup_array'),
                                        e('match_type')
                                    ]),
                                    'XMATCH': d('Cette fonction renvoie la position relative d\'un élément dans un tableau. Par défaut une correspondance exacte est attendue.',
                                        [e("valeur"), e("tableau"), e("[correspondance_mode]"), e("[recherche_mode]")]
                                    ),
                                    'XLOOKUP': d(
                                        'Cette fonction cherche une plage ou un tableau pour une correspondance et renvoie l\'élement dans une autre plage ou tableau. Par défaut une correspondance exacte est attendue.',
                                        [e("valeur"), e("tableau"), e("Tableau_retour"), e("[si_non_trouvé]"), e("[correspondance_mode]"), e("[recherche_mode]")]
                                    ),
                                    'MAX': d('Cette fonction renvoie la valeur maximale, la plus grande valeur, de toutes les valeurs dans les arguments.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MAXA': d('Cette fonction renvoie la plus grande valeur dans une liste d\'arguments, y compris les valeurs textuelles et logiques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MDETERM': d('Cette fonction renvoie le déterminant matriciel d\'un tableau.', [
                                        e('tableau')
                                    ]),
                                    'MDURATION': d('Cette fonction calcule la durée de Macaulay modifiée d\'un titre ayant une valeur nominale supposée de 100.', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('coupon'),
                                        e('rendement'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'MEDIAN': d('Cette fonction renvoie la médiane, c\'est-à-dire le nombre au milieu de l\'ensemble des nombres fournis ; c\'est-à-dire que la moitié des nombres ont des valeurs supérieures à la médiane, et l\'autre moitié des valeurs inférieures à la médiane.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MID': d('Cette fonction renvoie le nombre de caractères requis à partir d\'une chaîne de texte commençant à la position que vous spécifiez, et basée sur le nombre de caractères que vous spécifiez.', [
                                        e('texte'),
                                        e('position_début'),
                                        e('nombre_caractères')
                                    ]),
                                    'MIN': d('Cette fonction renvoie la valeur minimale, la plus petite valeur, de toutes les valeurs dans les arguments.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MINA': d('Cette fonction renvoie la valeur minimale dans une liste d\'arguments, y compris le texte et les valeurs logiques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MINUTE': d('Cette fonction renvoie la minute correspondant à une heure donnée.', [
                                        e('temps')
                                    ]),
                                    'MINVERSE': d('Cette fonction renvoie la matrice inverse pour la matrice stockée dans un tableau.', [
                                        e('tableau')
                                    ]),
                                    'MIRR': d('Cette fonction renvoie le taux de rendement interne modifié pour une série de flux financiers périodiques.', [
                                        e('values'),
                                        e('finance_rate'),
                                        e('reinvest_rate')
                                    ]),
                                    'MMULT': d('Cette fonction renvoie le produit matriciel pour deux tableaux.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'MOD': d('Cette fonction renvoie le reste d\'une opération de division.', [
                                        e('nombre'),
                                        e('diviseur')
                                    ]),
                                    'MODE': d('Cette fonction renvoie la valeur la plus fréquente dans un ensemble de données.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MONTH': d('Cette fonction renvoie le mois correspondant à la valeur de la date spécifiée.', [
                                        e('date')
                                    ]),
                                    'MROUND': d('Cette fonction renvoie un nombre arrondi au multiple souhaité.', [
                                        e('nombre'),
                                        e('multiple')
                                    ]),
                                    'MULTINOMIAL': d('Cette fonction calcule le rapport entre la factorielle d\'une somme de valeurs et le produit des factorielles.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'MUNIT': d('La fonction renvoie la matrice d\'unité pour la dimension spécifiée.', [
                                        e('dimension'),
                                    ]),
                                    'N': d('Cette fonction renvoie une valeur convertie en un nombre.', [
                                        e('valeur')
                                    ]),
                                    'NA': d('Cette fonction renvoie la valeur d\'erreur #N/A qui signifie non disponible.', []),
                                    'SHEET': d('Cette fonction renvoie le numéro de feuille de la feuille en référence.', [
                                        e('[valeur]'),
                                    ]),
                                    'SHEETS': d('Cette fonction renvoie le nombre de feuilles dans une référence.', [
                                        e('[référence]')
                                    ]),
                                    'NEGBINOMDIST': d('Cette fonction renvoie la distribution binomiale négative.', [
                                        e('number_f'),
                                        e('number_s'),
                                        e('probability_s')
                                    ]),
                                    'NETWORKDAYS': d('Cette fonction renvoie le nombre total de jours ouvrables complets entre les dates de début et de fin.', [
                                        e('date_début'),
                                        e('date_début'),
                                        e('vacances')
                                    ]),
                                    'NOMINAL': d('Cette fonction renvoie le taux d\'intérêt nominal annuel pour un taux effectif donné et un nombre de périodes de composition par an.', [
                                        e('taux_effectif'),
                                        e('composition_par_an')
                                    ]),
                                    'NORMDIST': d('Cette fonction renvoie la distribution cumulative normale pour la moyenne et l\'écart-type spécifiés.', [
                                        e('x'),
                                        e('moyenne'),
                                        e('standard_dev'),
                                        e('cumulé')
                                    ]),
                                    'NORMINV': d('Cette fonction renvoie l\'inverse de la distribution cumulative normale pour la moyenne et l\'écart-type donnés.', [
                                        e('probabilité'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'NORMSDIST': d('Cette fonction renvoie la fonction de distribution cumulative normale standard.', [
                                        e('valeur')
                                    ]),
                                    'NORMSINV': d('Cette fonction renvoie l\'inverse de la distribution cumulative normale standard. La distribution a une moyenne de zéro et un écart-type de un.', [
                                        e('probabilité')
                                    ]),
                                    'NOT': d('Cette fonction inverse la valeur logique de son argument.', [
                                        e('valeur_logique')
                                    ]),
                                    'NOW': d('Cette fonction renvoie la date et l\'heure actuelles.', []),
                                    'NPER': d('Cette fonction renvoie le nombre de périodes pour un investissement basé sur une valeur actuelle, une valeur future, des paiements périodiques et un taux d\'intérêt déterminé.', [
                                        e('taux'),
                                        e('paymt'),
                                        e('pval'),
                                        e('fval'),
                                        e('type')
                                    ]),
                                    'NPV': d('Cette fonction calcule la valeur actuelle nette d\'un investissement en utilisant un taux d\'actualisation et une série de paiements et de revenus futurs.', [
                                        e('taux'),
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'OBJECT': d("Cette fonction convertis une séquence propriété/expression en objet.", [
                                        e("propriété", true),
                                        e("expression", true)
                                    ]),
                                    'OCT2BIN': d('Cette fonction convertit un nombre octal en un nombre binaire.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'OCT2DEC': d('Cette fonction convertit un nombre octal en un nombre décimal.', [
                                        e('nombre')
                                    ]),
                                    'OCT2HEX': d('Cette fonction convertit un nombre octal en un nombre hexadécimal.', [
                                        e('nombre'),
                                        e('places')
                                    ]),
                                    'ODD': d('Cette fonction arrondit la valeur spécifiée au nombre entier impair le plus proche.', [
                                        e('valeur')
                                    ]),
                                    'ODDFPRICE': d('Cette fonction calcule le prix par 100 $ de valeur nominale d\'un titre ayant une première période impaire.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('émission'),
                                        e('premier_coupon'),
                                        e('taux'),
                                        e('rendement'),
                                        e('valeur_échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'ODDFYIELD': d('Cette fonction calcule le rendement d\'un titre ayant une première période impaire.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('émission'),
                                        e('premier_coupon'),
                                        e('taux'),
                                        e('price'),
                                        e('valeur_échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'ODDLPRICE': d('Cette fonction calcule le prix par 100 $ de valeur nominale d\'un titre dont la dernière période de coupon est impaire.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('last'),
                                        e('taux'),
                                        e('rendement'),
                                        e('valeur_échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'ODDLYIELD': d('Cette fonction calcule le rendement d\'un titre dont la dernière période est impaire.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('last'),
                                        e('taux'),
                                        e('price'),
                                        e('valeur_échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'OFFSET': d('Cette fonction renvoie une référence à une gamme. La plage est un nombre déterminé de lignes et de colonnes d\'une cellule ou d\'une plage de cellules. La fonction renvoie une seule cellule ou une plage de cellules.', [
                                        e('référence'),
                                        e('lignes'),
                                        e('colonnes'),
                                        e('hauteur'),
                                        e('largeur')
                                    ]),
                                    'OR': d('Cette fonction calcule le OU logique. Elle renvoie VRAI si l\'un de ses arguments est vrai ; sinon, elle renvoie FAUX si tous les arguments sont faux.', [
                                        e('valeur_logique1'),
                                        e('valeur_logique2', true)
                                    ]),
                                    'PEARSON': d('Cette fonction renvoie le coefficient de corrélation du moment du produit de Pearson, un indice sans dimension compris entre -1,0 et 1,0 inclus indiquant la relation linéaire de deux ensembles de données.', [
                                        e('tableau_ind'),
                                        e('tableau_coef')
                                    ]),
                                    'PERCENTILE': d('Cette fonction renvoie le nième percentile des valeurs dans une fourchette.', [
                                        e('tableau'),
                                        e('n')
                                    ]),
                                    'PERCENTRANK': d('Cette fonction renvoie le rang d\'une valeur dans un ensemble de données en pourcentage de l\'ensemble de données.', [
                                        e('tableau'),
                                        e('n'),
                                        e('importance')
                                    ]),
                                    'PERMUT': d('Cette fonction renvoie le nombre de permutations possibles pour un nombre déterminé d\'éléments.', [
                                        e('number'),
                                        e('number_chosen')
                                    ]),
                                    'PI': d('Cette fonction renvoie PI sous la forme 3.1415926536.', []),
                                    'PMT': d('Cette fonction renvoie le montant du paiement pour un prêt en fonction de la valeur actuelle, du taux d\'intérêt spécifié et du nombre de termes.', [
                                        e('taux'),
                                        e('nper'),
                                        e('pval'),
                                        e('fval'),
                                        e('type')
                                    ]),
                                    'POISSON': d('Cette fonction renvoie la distribution de Poisson.', [
                                        e('nevents'),
                                        e('moyenne'),
                                        e('cumulé')
                                    ]),
                                    'POWER': d('Cette fonction élève le nombre spécifié à la puissance spécifiée.', [
                                        e('nombre'),
                                        e('power')
                                    ]),
                                    'PPMT': d('Cette fonction renvoie le montant du paiement du principal d\'un prêt en fonction de la valeur actuelle, du taux d\'intérêt spécifié et du nombre de termes.', [
                                        e('taux'),
                                        e('valeur'),
                                        e('nper'),
                                        e('pval'),
                                        e('fval'),
                                        e('type')
                                    ]),
                                    'PRICE': d('Cette fonction calcule le prix par 100 $ de valeur nominale d\'un titre à intérêt périodique', [
                                        e('règlement'),
                                        e('échéance'),
                                        e('taux'),
                                        e('rendement'),
                                        e('valeur_échéance'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'PRICEDISC': d('Cette fonction renvoie le prix par 100 $ de valeur nominale d\'un titre à prix réduit.', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('remise'),
                                        e('valeur_échéance'),
                                        e('base')
                                    ]),
                                    'PRICEMAT': d('Cette fonction renvoie le prix à l\'échéance par 100 $ de valeur nominale d\'un titre qui rapporte des intérêts.', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('émission'),
                                        e('taux'),
                                        e('rendement'),
                                        e('base')
                                    ]),
                                    'PROB': d('Cette fonction renvoie la probabilité que les valeurs dans une fourchette se situent entre deux limites.', [
                                        e('fourchette_x'),
                                        e('fourchette_probabilité'),
                                        e('limite_inférieure'),
                                        e('limite_supérieure')
                                    ]),
                                    'PRODUCT': d('Cette fonction multiplie tous les arguments et renvoie le produit.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'PROPER': d('Cette fonction met en majuscule la première lettre de chaque mot d\'une chaîne de texte.', [
                                        e('texte')
                                    ]),
                                    'PROPERTY': d("Cette fonction retourne la valeur de la propriété en objet.", [
                                        e("expression"), 
                                        e("chemin_propriété")
                                    ]),
                                    'PV': d('Cette fonction renvoie la valeur actuelle d\'un investissement en fonction du taux d\'intérêt, du nombre et du montant des paiements périodiques, et de la valeur future. La valeur actualisée est le montant total que vaut une série de paiements futurs.', [
                                        e('taux'),
                                        e('numper'),
                                        e('paiement'),
                                        e('fval'),
                                        e('type')
                                    ]),
                                    'QUARTILE': d('Cette fonction renvoie quel quartile (quel quart ou 25 %) d\'un ensemble de données une valeur est.', [
                                        e('tableau'),
                                        e('quart')
                                    ]),
                                    'QUOTIENT': d('Cette fonction renvoie la partie entière d\'une division. Utilisez cette fonction pour ignorer le reste d\'une division.', [
                                        e('numerateur'),
                                        e('dénominateur')
                                    ]),
                                    'RADIANS': d('Cette fonction convertit le nombre spécifié de degrés en radians.', [
                                        e('valeur')
                                    ]),
                                    'RAND': d('Cette fonction renvoie un nombre aléatoire uniformément réparti entre 0 et 1.', []),
                                    'RANDBETWEEN': d('Cette fonction renvoie un nombre aléatoire entre les nombres que vous spécifiez.', [
                                        e('limite_inférieure'),
                                        e('limite_supérieure')
                                    ]),
                                    'RANGEBLOCKSPARKLINE': d("Cette fonction retourne un rangeTemplate.", [
                                        e("template_range"), 
                                        e("expression")
                                    ]),
                                    'RANK': d('Cette fonction renvoie le rang d\'un nombre dans un ensemble de nombres. Si vous deviez trier l\'ensemble, le rang du nombre serait sa position dans la liste.', [
                                        e('nombre'),
                                        e('référence'),
                                        e('ordre')
                                    ]),
                                    'RATE': d('Cette fonction retourne le taux d\'intérêt par période d\'une rente.', [
                                        e('nper'),
                                        e('pmt'),
                                        e('pval'),
                                        e('fval'),
                                        e('type'),
                                        e('estimation')
                                    ]),
                                    'RECEIVED': d('Cette fonction restitue le montant reçu à l\'échéance pour un titre entièrement investi.', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('investment'),
                                        e('remise'),
                                        e('base')
                                    ]),
                                    'REPLACE': d('Cette fonction remplace une partie d\'une chaîne de texte par une chaîne de texte différente, en fonction du nombre de caractères que vous spécifiez.', [
                                        e('ancien_text'),
                                        e('position_début'),
                                        e('nombre_caractères'),
                                        e('nouveau_texte')
                                    ]),
                                    'REPT': d('Cette fonction permet de répéter le texte un nombre déterminé de fois.', [
                                        e('texte'),
                                        e('nombre_fois')
                                    ]),
                                    'RIGHT': d('Cette fonction renvoie les caractères de droite spécifiés à partir d\'une valeur de texte, et en fonction du nombre de caractères que vous spécifiez.', [
                                        e('texte'),
                                        e('nombre_caractères')
                                    ]),
                                    'ROMAN': d('Cette fonction convertit un chiffre arabe en un équivalent textuel en chiffres romains.', [
                                        e('nombre'),
                                        e('forme')
                                    ]),
                                    'ROUND': d('Cette fonction arrondit la valeur spécifiée au nombre le plus proche, en utilisant le nombre de décimales spécifié.', [
                                        e('number'),
                                        e('num_digits')
                                    ]),
                                    'ROUNDDOWN': d('Cette fonction arrondit le nombre spécifié au nombre le plus proche, en utilisant le nombre spécifié de décimales.', [
                                        e('number'),
                                        e('num_digits')
                                    ]),
                                    'ROUNDUP': d('Cette fonction permet d\'arrondir le nombre spécifié au nombre le plus proche, en utilisant le nombre de décimales spécifié.', [
                                        e('number'),
                                        e('num_digits')
                                    ]),
                                    'ROW': d('Cette fonction renvoie le numéro d\'une ligne à partir d\'une référence.', [
                                        e('référence')
                                    ]),
                                    'ROWS': d('Cette fonction renvoie le nombre de lignes dans un tableau.', [
                                        e('tableau')
                                    ]),
                                    'RSQ': d('Cette fonction renvoie le carré du coefficient de corrélation du moment du produit de Pearson (R au carré) par les points de données dans les y connus et les x connus.', [
                                        e('tableau_coef'),
                                        e('tableau_ind')
                                    ]),
                                    'SEARCH': d('Cette fonction trouve une chaîne de texte dans une autre chaîne de texte et renvoie l\'index de la position de départ du texte trouvé.', [
                                        e('texte_recherché'),
                                        e('dans_texte'),
                                        e(x)
                                    ]),
                                    'SECOND': d('Cette fonction renvoie la valeur des secondes (0 à 59) pour une durée déterminée.', [
                                        e('temps')
                                    ]),
                                    'SERIESSUM': d('Cette fonction renvoie la somme d\'une série de puissances.', [
                                        e('x'),
                                        e('n'),
                                        e('m'),
                                        e('coefficients')
                                    ]),
                                    'SIGN': d('Cette fonction renvoie le signe d\'un nombre ou d\'une expression.', [
                                        e('ref_cellule')
                                    ]),
                                    'SIN': d('Cette fonction renvoie le sinus de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'SINH': d('Cette fonction renvoie le sinus hyperbolique du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'SKEW': d('Cette fonction renvoie l\'asymétrie d\'une distribution.', [
                                        e('nombre1'),
                                        e('nombre2', true)
                                    ]),
                                    'SLN': d('Cette fonction retourne l\'amortissement linéaire d\'un actif pour une période.', [
                                        e('coût'),
                                        e('récupération'),
                                        e('vie')
                                    ]),
                                    'SLOPE': d('Cette fonction calcule la pente d\'une régression linéaire.', [
                                        e('tableau_coef'),
                                        e('tableau_ind')
                                    ]),
                                    'SMALL': d('Cette fonction renvoie la nième plus petite valeur dans un ensemble de données, où n est spécifié.', [
                                        e('tableau'),
                                        e('n')
                                    ]),
                                    'SQRT': d('Cette fonction renvoie la racine carrée positive du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'SQRTPI': d('TCette fonction renvoie la racine carrée positive d\'un multiple de pi (p).', [
                                        e('multiple')
                                    ]),
                                    'STANDARDIZE': d('Cette fonction renvoie une valeur normalisée à partir d\'une distribution caractérisée par la moyenne et l\'écart-type.', [
                                        e('x'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'STDEVA': d('Cette fonction renvoie l\'écart type pour un ensemble de nombres, de textes ou de valeurs logiques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'STDEVP': d('Cette fonction renvoie l\'écart type pour une population entière spécifiée (de valeurs numériques).', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'STDEVPA': d('Cette fonction renvoie l\'écart type pour l\'ensemble d\'une population spécifiée, y compris les valeurs textuelles ou logiques ainsi que les valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'STEYX': d('Cette fonction renvoie l\'erreur type de la valeur prédite de y pour chaque x. L\'erreur type est une mesure de la quantité d\'erreur dans la prédiction de y pour une valeur de x.', [
                                        e('tableau_coef'),
                                        e('tableau_ind')
                                    ]),
                                    'SUBSTITUTE': d('Cette fonction substitue une nouvelle chaîne aux caractères spécifiés dans une chaîne existante.', [
                                        e('texte'),
                                        e('ancien_texte'),
                                        e('nouveau_texte'),
                                        e('nombre')
                                    ]),
                                    'SUBTOTAL': d('Cette fonction calcule un sous-total d\'une liste de nombres en utilisant une fonction intégrée spécifique.', [
                                        e('num_fonction'),
                                        e('référence1'),
                                        e('référence2', true)
                                    ]),
                                    'SUM': d('Cette fonction renvoie la somme des cellules ou la plage de cellules.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'SUMIF': d('Cette fonction permet d\'ajouter les cellules en utilisant un critère donné.', [
                                        e('range'),
                                        e('critère'),
                                        e('sum_range')
                                    ]),
                                    'SUMIFS': d('Cette fonction permet d\'ajouter les cellules dans une plage en utilisant plusieurs critères.', [
                                        e('sum_range'),
                                        e('criteria_range1',true),
                                        e('criteria1', true)
                                    ]),
                                    'SUMPRODUCT': d('Cette fonction renvoie la somme des produits des cellules. Multiplie les composants correspondants dans les matrices données, et renvoie la somme de ces produits.', [
                                        e('tableau1'),
                                        e('tableau2', true)
                                    ]),
                                    'SUMSQ': d('Cette fonction retourne la somme des carrés des arguments.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'SUMX2MY2': d('Cette fonction renvoie la somme de la différence des carrés des valeurs correspondantes dans deux tableaux.', [
                                        e('tableau_x'),
                                        e('tableau_y')
                                    ]),
                                    'SUMX2PY2': d('Cette fonction renvoie la somme des carrés des valeurs correspondantes dans deux tableaux.', [
                                        e('tableau_x'),
                                        e('tableau_y')
                                    ]),
                                    'SUMXMY2': d('Cette fonction renvoie la somme du carré des différences des valeurs correspondantes dans deux tableaux.', [
                                        e('tableau_x'),
                                        e('tableau_y')
                                    ]),
                                    'SYD': d('Cette fonction renvoie la somme des années et des chiffres de la dépréciation d\'un actif pour une période donnée.', [
                                        e('coût'),
                                        e('récupération'),
                                        e('vie'),
                                        e('periode')
                                    ]),
                                    'T': d('Cette fonction renvoie le texte dans une cellule spécifique.', [
                                        e('valeur')
                                    ]),
                                    'TAN': d('Cette fonction renvoie la tangente de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'TANH': d('Cette fonction renvoie la tangente hyperbolique du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'TBILLEQ': d('Cette fonction renvoie le rendement équivalent pour un bon du Trésor (ou T-bill)', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('remise')
                                    ]),
                                    'TBILLPRICE': d('Cette fonction renvoie le prix par 100 $ de valeur nominale pour un bon du Trésor (ou T-bill).', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('remise')
                                    ]),
                                    'TBILLYIELD': d('TCette fonction retourne le rendement d\'un bon du Trésor (ou T-bill).', [
                                        e('liquidation'),
                                        e('maturité'),
                                        e('priceper')
                                    ]),
                                    'TDIST': d('Cette fonction renvoie la probabilité de la distribution t.', [
                                        e('x'),
                                        e('deg_freedom'),
                                        e('tails')
                                    ]),
                                    'TEXT': d('Cette fonction permet de formater un numéro et de le convertir en texte.', [
                                        e('valeur'),
                                        e('format_texte')
                                    ]),
                                    'TIME': d('Cette fonction renvoie l\'objet TimeSpan pour une durée déterminée.', [
                                        e('heure'),
                                        e('minute'),
                                        e('seconde')
                                    ]),
                                    'TIMEVALUE': d('Cette fonction renvoie l\'objet TimeSpan du temps représenté par une chaîne de texte.', [
                                        e('texte_heure')
                                    ]),
                                    'TINV': d('Cette fonction renvoie la valeur t de la distribution t de l\'étudiant en fonction de la probabilité et des degrés de liberté.', [
                                        e('probability'),
                                        e('deg_freedom')
                                    ]),
                                    'TODAY': d('Cette fonction renvoie la date et l\'heure de la date actuelle.', []),
                                    'TRANSPOSE': d('Cette fonction renvoie une plage verticale de cellules comme plage horizontale ou une plage horizontale de cellules comme plage verticale.', [
                                        e('tableau')
                                    ]),
                                    'TREND': d('Cette fonction renvoie des valeurs selon une tendance linéaire. Cette fonction fait correspondre une ligne droite aux tableaux de valeurs x et y connues. Trend renvoie les valeurs y le long de cette ligne pour le tableau des nouvelles valeurs x spécifiées.', [
                                        e('y'),
                                        e('x'),
                                        e('x_nouveaux'),
                                        e('constante')
                                    ]),
                                    'TRIM': d('Cette fonction supprime les espaces supplémentaires d\'une chaîne de caractères et laisse des espaces simples entre les mots.', [
                                        e('texte')
                                    ]),
                                    'TRIMMEAN': d('Cette fonction renvoie la moyenne d\'un sous-ensemble de données excluant les données du haut et du bas.', [
                                        e('tableau'),
                                        e('pourcentage')
                                    ]),
                                    'TRUE': d('Cette fonction renvoie la valeur de logique VRAI.', []),
                                    'TRUNC': d('Cette fonction supprime la partie fractionnaire spécifiée du nombre spécifié.', [
                                        e('valeur'),
                                        e('num_digits')
                                    ]),
                                    'TTEST': d('Cette fonction renvoie la probabilité associée à un test t.', [
                                        e('tableau1'),
                                        e('tableau2'),
                                        e('uni_bilatéral'),
                                        e('type')
                                    ]),
                                    'TYPE': d('Cette fonction renvoie le type de valeur.', [
                                        e('valeur')
                                    ]),
                                    'UPPER': d('Cette fonction convertit le texte en lettres majuscules.', [
                                        e('texte')
                                    ]),
                                    'VALUE': d('Cette fonction convertit une chaîne de texte qui est un nombre en une valeur numérique.', [
                                        e('texte')
                                    ]),
                                    'VAR': d('Cette fonction renvoie la variance basée sur un échantillon d\'une population, qui n\'utilise que des valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'VARA': d('Cette fonction renvoie la variance basée sur un échantillon d\'une population, qui comprend des valeurs numériques, logiques ou textuelles.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'VARP': d('Cette fonction renvoie la variance basée sur l\'ensemble de la population, qui utilise uniquement des valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'VARPA': d('Cette fonction renvoie la variance basée sur l\'ensemble de la population, qui comprend des valeurs numériques, logiques ou textuelles.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'VDB': d('Cette fonction retourne l\'amortissement d\'un actif pour toute période que vous spécifiez en utilisant la méthode de l\'amortissement dégressif variable.', [
                                        e('coût'),
                                        e('réupération'),
                                        e('vie'),
                                        e('début_période'),
                                        e('fin_période'),
                                        e('factor'),
                                        e('no_switch')
                                    ]),
                                    'VLOOKUP': d('Cette fonction recherche une valeur dans la colonne la plus à gauche et renvoie une valeur dans la même ligne à partir d\'une colonne que vous spécifiez.', [
                                        e('lookup_value'),
                                        e('table_array'),
                                        e('col_index_num'),
                                        e('range_lookup')
                                    ]),
                                    'WEEKDAY': d('Cette fonction renvoie le numéro correspondant au jour de la semaine pour une date donnée.', [
                                        e('date'),
                                        e('type')
                                    ]),
                                    'WEEKNUM': d('Cette fonction renvoie un numéro qui indique numériquement la semaine de l\'année.', [
                                        e('date'),
                                        e('semaine_type')
                                    ]),
                                    'DATEPART': d('This function formats a date and converts it to text.', [
                                        e('date'),
                                        e('format_text'),
                                        e('weektype')
                                    ]),
                                    'WEIBULL': d('Cette fonction renvoie la distribution de Weibull à deux paramètres, souvent utilisée dans les analyses de fiabilité.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('cumulé')
                                    ]),
                                    'WORKDAY': d('Cette fonction renvoie le nombre de jours ouvrables avant ou après la date de début.', [
                                        e('date_début'),
                                        e('jours'),
                                        e('vacances')
                                    ]),
                                    'XIRR': d('Cette fonction calcule le taux de rendement interne pour un tableau de flux de trésorerie qui peut ne pas être périodique.', [
                                        e('valeurs'),
                                        e('dates'),
                                        e('estimation')
                                    ]),
                                    'XNPV': d('Cette fonction calcule la valeur actuelle nette pour un tableau de flux de trésorerie qui peut ne pas être périodique.', [
                                        e('taux'),
                                        e('valeurs'),
                                        e('dates')
                                    ]),
                                    'YEAR': d('Cette fonction renvoie l\'année sous forme de nombre entier pour une date donnée.', [
                                        e('date')
                                    ]),
                                    'YEARFRAC': d('Cette fonction renvoie la fraction de l\'année représentée par le nombre de jours entiers entre les dates de début et de fin.', [
                                        e('date_début'),
                                        e('date_début'),
                                        e('base')
                                    ]),
                                    'YIELD': d('Cette fonction calcule le rendement d\'un titre qui paie des intérêts périodiques.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('taux'),
                                        e('valeur_nominale'),
                                        e('valeur_rachat'),
                                        e('fréquence'),
                                        e('base')
                                    ]),
                                    'YIELDDISC': d('Cette fonction calcule le rendement annuel d\'un titre à escompte.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('valeur_nominale'),
                                        e('valeur_rachat'),
                                        e('base')
                                    ]),
                                    'YIELDMAT': d('Cette fonction calcule le rendement annuel d\'un titre qui paie des intérêts à l\'échéance.', [
                                        e('liquidation'),
                                        e('échéance'),
                                        e('émission'),
                                        e('taux'),
                                        e('valeur_nominale'),
                                        e('base')
                                    ]),
                                    'ZTEST': d('Cette fonction renvoie la valeur de signification d\'un z-test. Le test z génère un score standard pour x par rapport à l\'ensemble des données et renvoie la probabilité bilatérale pour la distribution normale.', [
                                        e('tableau'),
                                        e('x'),
                                        e('sigma')
                                    ]),
                                    'HBARSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une ligne d\'étincelle Hbar', [
                                        e('valeur'),
                                        e('schémas_couleur'),
                                        e('axes_visible'),
                                        e('hauteur_barre')
                                    ]),
                                    'VBARSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une Vbar sparkline', [
                                        e('valeur'),
                                        e('schémas_couleur'),
                                        e('axes_visible'),
                                        e('hauteur_barre')
                                    ]),
                                    'VARISPARKLINE': d('Cette fonction renvoie un ensemble de données utilisé pour représenter une variance sparkline', [
                                        e('variance'),
                                        e('référence'),
                                        e('mini'),
                                        e('maxi'),
                                        e('mark'),
                                        e('tickunit'),
                                        e('légende'),
                                        e('couleur_positif'),
                                        e('couleur_négatif'),
                                        e('vertical')
                                    ]),
                                    'PIESPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une ligne de graphique circulaire.', [
                                        e('range|percentage'),
                                        e('couleur', true)
                                    ]),
                                    'AREASPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une  zone sparkline', [
                                        e('points'),
                                        e('mini'),
                                        e('maxi'),
                                        e('ligne1'),
                                        e('ligne2'),
                                        e('couleur_positif'),
                                        e('couleur_négatif')
                                    ]),
                                    'SCATTERSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une ligne de dispersion', [
                                        e('points1'),
                                        e('points2'),
                                        e('minX'),
                                        e('maxX'),
                                        e('minY'),
                                        e('maxY'),
                                        e('hligne'),
                                        e('vligne'),
                                        e('xMinZone'),
                                        e('xMaxZone'),
                                        e('yMinZone'),
                                        e('yMaxZone'),
                                        e('tags'),
                                        e('drawSymbol'),
                                        e('drawlignes'),
                                        e('color1'),
                                        e('color2'),
                                        e('dash')
                                    ]),
                                    'LINESPARKLINE': d('Cette fonction renvoie un ensemble de données utilisé pour représenter une ligne sparkline', [
                                        e('data'),
                                        e('dataOrientation'),
                                        e('dateAxisData'),
                                        e('dateAxisOrientation'),
                                        e('paramètre')
                                    ]),
                                    'COLUMNSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisé pour représenter une colonne sparkline', [
                                        e('data'),
                                        e('dataOrientation'),
                                        e('dateAxisData'),
                                        e('dateAxisOrientation'),
                                        e('paramètre')
                                    ]),
                                    'WINLOSSSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter un gain/perte sparkline', [
                                        e('data'),
                                        e('dataOrientation'),
                                        e('dateAxisData'),
                                        e('dateAxisOrientation'),
                                        e('paramètre')
                                    ]),
                                    'BULLETSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter un point sparkline', [
                                        e('mesure'),
                                        e('cible'),
                                        e('maxi'),
                                        e('bon'),
                                        e('mauvais'),
                                        e('prévision'),
                                        e('tickunit'),
                                        e('couleur_schemas'),
                                        e('vertical'),
                                        e('couleur_mesure'),
                                        e('couleur_cible'),
                                        e('couleur_maxi'),
                                        e('couleur_bon'),
                                        e('couleur_mauvais'),
                                        e('couleur_prévision'),
                                        e('autoriser_mesure_après_maxi'),
                                        e('taille_barre')
                                    ]),
                                    'SPREADSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une dispersion sparkline', [
                                        e('points'),
                                        e('montrer_moyenne'),
                                        e('échelle_début'),
                                        e('échelle_fin'),
                                        e('style'),
                                        e('schémas-couleur'),
                                        e('vertical')
                                    ]),
                                    'STACKEDSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisé pour représenter une sparkline empilée', [
                                        e('points'),
                                        e('plage_couleur'),
                                        e('plage_label'),
                                        e('maximum'),
                                        e('cible_rouge'),
                                        e('cible_verte'),
                                        e('cible_bleue'),
                                        e('traget_jaune'),
                                        e('couleur'),
                                        e('surlignage_position'),
                                        e('vertical'),
                                        e('orientation'),
                                        e('taille')
                                    ]),
                                    'BOXPLOTSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter un boxplot sparkline', [
                                        e('points'),
                                        e('boxPlotClass'),
                                        e('montrer_moyenne'),
                                        e('échelle_début'),
                                        e('échelle_fin'),
                                        e('acceptable_début'),
                                        e('acceptable_fin'),
                                        e('schémas_couleur'),
                                        e('style'),
                                        e('vertical')
                                    ]),
                                    'CASCADESPARKLINE': d('Cette fonction renvoie un ensemble de données utilisé pour représenter une cascade sparkline', [
                                        e('points_range'),
                                        e('point_index'),
                                        e('labels_range'),
                                        e('minimum'),
                                        e('maximum'),
                                        e('couleur_positive'),
                                        e('ccouleur_négative'),
                                        e('vertical'),
                                        e("élément_range"), 
                                        e("couleur_total")
                                    ]),
                                    'PARETOSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter un pareto sparkline', [
                                        e('points'),
                                        e('point_index'),
                                        e('couleur_range'),
                                        e('cible'),
                                        e('cible2'),
                                        e('surlignagne_position'),
                                        e('libellé'),
                                        e('vertical'),
                                        e('cible_couleur'),
                                        e('cible2_couleur'),
                                        e('libellé_couleur'),
                                        e('taille_barre')
                                    ]),
                                    'MONTHSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter un mois sparkline', [
                                        e('année'),
                                        e('mois'),
                                        e('plage_donnée'),
                                        e('couleur_vide'),
                                        e('couleur_début'),
                                        e('couleu_moyenne'),
                                        e('couleur_fin')
                                    ]),
                                    'YEARSPARKLINE': d('Cette fonction renvoie un ensemble de données utilisées pour représenter une année sparkline', [
                                        e('année'),
                                        e('plage_donnée'),
                                        e('couleur_vide'),
                                        e('couleur_début'),
                                        e('couleur_moyenne'),
                                        e('couleur_fin')
                                    ]),
                                    'GAUGEKPISPARKLINE': d('This function returns a data set used for representing a gauge KPI sparkline', [
                                        e('targetValue'),
                                        e('currentValue'),
                                        e('minValue'),
                                        e('maxValue'),
                                        e('showLabel'),
                                        e('targetValueLabel'),
                                        e('currentValueLabel'),
                                        e('minValueLabel'),
                                        e('maxValueLabel'),
                                        e('fontArray'),
                                        e('minAngle'),
                                        e('maxAngle'),
                                        e('radiusRatio'),
                                        e('gaugeType'),
                                        e('colorRange'),
                                        e('...'),
                                    ]
                                ),
                                'HISTOGRAMSPARKLINE': d('This function returns a data set used for representing a histogram sparkline', [
                                        e('dateRange'),
                                        e('continuous'), 
                                        e('paintLabel'), 
                                        e('scale'), 
                                        e('barWidth'), 
                                        e('barColor'), 
                                        e('labelFontStyle'), 
                                        e('labelColor'), 
                                        e('edgeColor')
                                ]),
                                'CEILING.PRECISE': d('Cette fonction permet d\'arrondir un nombre au nombre entier le plus proche ou au multiple le plus proche d\'une valeur donnée.', [
                                        e('nombre'),
                                        e('importance')
                                    ]),
                                    'COVARIANCE.S': d('Cette fonction renvoie la covariance de l\'échantillon, qui est la moyenne des produits des écarts pour chaque paire de points de données dans deux séries de nombres.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'FLOOR.PRECISE': d('Cette fonction permet d\'arrondir un nombre au nombre entier le plus proche ou au multiple le plus proche d\'une valeur donnée.', [
                                        e('nombre'),
                                        e('importance')
                                    ]),
                                    'PERCENTILE.EXC': d('Cette fonction renvoie le nième percentile des valeurs dans une fourchette.', [
                                        e('tableau'),
                                        e('k')
                                    ]),
                                    'QUARTILE.EXC': d('Cette fonction renvoie quel quartile (quel quart ou 25 %) d\'un ensemble de données une valeur est.', [
                                        e('tableau'),
                                        e('quart')
                                    ]),
                                    'RANK.AVG': d('Cette fonction renvoie le rang d\'un nombre dans un ensemble de nombres. Si certaines valeurs ont le même rang, elle renvoie le rang moyen.', [
                                        e('nombre'),
                                        e('tableau'),
                                        e('[ordre]')
                                    ]),
                                    'MODE.MULT': d('Cette fonction renvoie le tableau vertical le plus fréquent ou la valeur la plus fréquente dans un ensemble de données.', [
                                        e('nombre1'),
                                        e('nombre2', true)
                                    ]),
                                    'STDEV.P': d('Cette fonction renvoie l\'écart type pour une population entière spécifiée (de valeurs numériques).', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'VAR.P': d('Cette fonction renvoie la variance basée sur l\'ensemble de la population, qui utilise uniquement des valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'COVARIANCE.P': d('Cette fonction renvoie la covariance, qui est la moyenne des produits des écarts pour chaque paire de points de données dans deux ensembles de nombres.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'MODE.SNGL': d('Cette fonction renvoie la valeur la plus fréquente dans un ensemble de données.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'PERCENTILE.INC': d('Cette fonction renvoie le nième percentile des valeurs dans une plage.', [
                                        e('tableau'),
                                        e('n')
                                    ]),
                                    'QUARTILE.INC': d('Cette fonction renvoie quel quartile (quel quart ou 25 %) d\'un ensemble de données une valeur est.', [
                                        e('tableau'),
                                        e('quart')
                                    ]),
                                    'RANK.EQ': d('Cette fonction renvoie le rang d\'un nombre dans un ensemble de nombres. Si vous deviez trier l\'ensemble, le rang du nombre serait sa position dans la liste.', [
                                        e('nombre'),
                                        e('tableau'),
                                        e('ordre')
                                    ]),
                                    'STDEV': d('Cette fonction renvoie l\'écart-type est estimé sur la base d\'un échantillon.', [
                                        e('nombre1'),
                                        e('nombre2', true)
                                    ]),
                                    'STDEV.S': d('Cette fonction renvoie l\'écart-type est estimé sur la base d\'un échantillon.', [
                                        e('nombre1'),
                                        e('nombre2', true)
                                    ]),
                                    'VAR.S': d('Cette fonction renvoie la variance basée sur un échantillon d\'une population, qui n\'utilise que des valeurs numériques.', [
                                        e('valeur1'),
                                        e('valeur2', true)
                                    ]),
                                    'BETA.INV': d('Cette fonction calcule l\'inverse de la fonction de distribution bêta cumulative.', [
                                        e('probabilité'),
                                        e('alpha'),
                                        e('beta'),
                                        e('inférieur'),
                                        e('supérieur')
                                    ]),
                                    'BINOM.DIST': d('Cette fonction calcule la probabilité de distribution binomiale des termes individuels.', [
                                        e('number_s'),
                                        e('trials'),
                                        e('probability_s'),
                                        e('cumulé')
                                    ]),
                                    'BINOM.INV': d('Cette fonction renvoie le critère binomial, la plus petite valeur pour laquelle la distribution binomiale cumulative est supérieure ou égale à une valeur de critère.', [
                                        e('trials'),
                                        e('probability_s'),
                                        e('alpha')
                                    ]),
                                    'CHISQ.DIST.RT': d('Cette fonction calcule la probabilité unilatérale de la distribution du chi carré.', [
                                        e('valeur'),
                                        e('deg_freedom')
                                    ]),
                                    'CHISQ.INV.RT': d('Cette fonction calcule l\'inverse de la probabilité unilatérale de la distribution du chi carré.', [
                                        e('probabilité'),
                                        e('deg_freedom')
                                    ]),
                                    'CHISQ.TEST': d('Cette fonction calcule le test d\'indépendance par rapport à la distribution chi carré.', [
                                        e('obs_tableau'),
                                        e('exp_tableau')
                                    ]),
                                    'CONFIDENCE.NORM': d('Cette fonction renvoie l\'intervalle de confiance pour une moyenne de population.', [
                                        e('alpha'),
                                        e('standard_dev'),
                                        e('size')
                                    ]),
                                    'EXPON.DIST': d('Cette fonction renvoie la distribution exponentielle ou la densité de probabilité.', [
                                        e('valeur'),
                                        e('lambda'),
                                        e('cumulé')
                                    ]),
                                    'F.DIST.RT': d('Cette fonction calcule la distribution de probabilité F, pour voir les degrés de diversité entre deux ensembles de données.', [
                                        e('valeur'),
                                        e('deg_liberté1'),
                                        e('deg_liberté2')
                                    ]),
                                    'F.INV.RT': d('Cette fonction renvoie l\'inverse de la distribution de probabilité F.', [
                                        e('probabilité'),
                                        e('deg_liberté1'),
                                        e('deg_liberté2')
                                    ]),
                                    'F.TEST': d('Cette fonction renvoie le résultat d\'un test F, qui indique la probabilité unilatérale que les variances dans deux tableaux ne soient pas significativement différentes.', [
                                        e('tableau1'),
                                        e('tableau2')
                                    ]),
                                    'GAMMA.DIST': d('Cette fonction renvoie la distribution gamma.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('cumulé')
                                    ]),
                                    'GAMMA.INV': d('Cette fonction renvoie l\'inverse de la distribution cumulative gamma.', [
                                        e('probabilité'),
                                        e('alpha'),
                                        e('beta')
                                    ]),
                                    'LOGNORM.INV': d('Cette fonction renvoie l\'inverse de la fonction de distribution cumulative lognormale de x, où LN(x) est normalement distribué avec la moyenne et l\'écart-type spécifiés.', [
                                        e('probabilité'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'NORM.DIST': d('Cette fonction renvoie la distribution cumulative normale pour la moyenne et l\'écart-type spécifiés.', [
                                        e('x'),
                                        e('moyenne'),
                                        e('standard_dev'),
                                        e('cumulé')
                                    ]),
                                    'NORM.INV': d('Cette fonction renvoie l\'inverse de la distribution cumulative normale pour la moyenne et l\'écart-type donnés.', [
                                        e('probabilité'),
                                        e('moyenne'),
                                        e('standard_dev')
                                    ]),
                                    'NORM.S.INV': d('Cette fonction renvoie l\'inverse de la distribution cumulé normale standard. La distribution a une moyenne de zéro et un écart-type de un.', [
                                        e('probabilité')
                                    ]),
                                    'PERCENTRANK.INC': d('Cette fonction renvoie le rang d\'une valeur dans un ensemble de données en pourcentage de l\'ensemble de données.', [
                                        e('tableau'),
                                        e('n'),
                                        e(y)
                                    ]),
                                    'POISSON.DIST': d('Cette fonction renvoie la distribution de Poisson.', [
                                        e('nevents'),
                                        e('moyenne'),
                                        e('cumulé')
                                    ]),
                                    'T.INV.2T': d('Cette fonction renvoie la valeur t de la distribution t de l\'étudiant en fonction de la probabilité et des degrés de liberté.', [
                                        e('probability'),
                                        e('deg_freedom')
                                    ]),
                                    'T.TEST': d('Cette fonction renvoie la probabilité associée à un test t.', [
                                        e('tableau1'),
                                        e('tableau2'),
                                        e('tails'),
                                        e('type')
                                    ]),
                                    'WEIBULL.DIST': d('Cette fonction renvoie la distribution de Weibull à deux paramètres, souvent utilisée dans les analyses de fiabilité.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('cumulé')
                                    ]),
                                    'Z.TEST': d('Cette fonction renvoie la valeur de signification d\'un z-test. Le test z génère un score standard pour x par rapport à l\'ensemble des données et renvoie la probabilité bilatérale pour la distribution normale.', [
                                        e('tableau'),
                                        e('x'),
                                        e('sigma')
                                    ]),
                                    'T.DIST.RT': d('Cette fonction renvoie la distribution t à droite.', [
                                        e('x'),
                                        e('deg_freedom')
                                    ]),
                                    'T.DIST.2T': d('Cette fonction renvoie la distribution t bilatérale.', [
                                        e('x'),
                                        e('deg_freedom')
                                    ]),
                                    'ISO.CEILING': d('Cette fonction renvoie un nombre jusqu\'à l\'entier le plus proche ou au multiple de signification le plus proche, quel que soit le signe de signification.', [
                                        e('nombre'),
                                        e('importance')
                                    ]),
                                    'BETA.DIST': d('Cette fonction renvoie la distribution bêta.', [
                                        e('x'),
                                        e('alpha'),
                                        e('beta'),
                                        e('cumulé'),
                                        e('dessous'),
                                        e('dessus')
                                    ]),
                                    'GAMMALN.PRECISE': d('Cette fonction renvoie le logarithme naturel de la fonction gamma.', [
                                        e('valeur')
                                    ]),
                                    'ERF.PRECISE': d('Cette fonction renvoie la fonction d\'erreur.', [
                                        e('limite_basse')
                                    ]),
                                    'ERFC.PRECISE': d('Cette fonction renvoie la fonction complémentaire du FER.', [
                                        e('limite_basse')
                                    ]),
                                    'PERCENTRANK.EXC': d('Cette fonction renvoie le rang en pourcentage (0..1, exclusif) d\'une valeur dans un ensemble de données.', [
                                        e('tableau'),
                                        e('n'),
                                        e('importance')
                                    ]),
                                    'HYPGEOM.DIST': d('Cette fonction renvoie la distribution hypergéométrique.', [
                                        e('sample_s'),
                                        e('number_sample'),
                                        e('population_s'),
                                        e('number_pop'),
                                        e('cumulé')
                                    ]),
                                    'LOGNORM.DIST': d('Cette fonction renvoie la distribution logarithmique normale de x.', [
                                        e('x'),
                                        e('moyenne'),
                                        e('devstd'),
                                        e('cumulé')
                                    ]),
                                    'NEGBINOM.DIST': d('Cette fonction renvoie la distribution binomiale négative.', [
                                        e('nombre_f'),
                                        e('nombre_s'),
                                        e('probabilité_s'),
                                        e('cumulé')
                                    ]),
                                    'NORM.S.DIST': d('Cette fonction renvoie la distribution normale standard.', [
                                        e('z'),
                                        e('cumulé')
                                    ]),
                                    'T.DIST': d('Cette fonction renvoie la distribution t.', [
                                        e('x'),
                                        e('deg_freedom'),
                                        e('cumulé')
                                    ]),
                                    'F.DIST': d('Cette fonction renvoie la distribution de probabilité F.', [
                                        e('x'),
                                        e('degnum'),
                                        e('degden'),
                                        e('cumulé')
                                    ]),
                                    'CHISQ.DIST': d('Cette fonction renvoie la distribution chi carré.', [
                                        e('x'),
                                        e('deg_freedom'),
                                        e('cumulé')
                                    ]),
                                    'F.INV': d('Cette fonction renvoie l\'inverse de la distribution de probabilité F.', [
                                        e('probabilité'),
                                        e('degnum'),
                                        e('degden')
                                    ]),
                                    'T.INV': d('Cette fonction renvoie l\'inverse à gauche de la distribution t.', [
                                        e('probabilité'),
                                        e('deg_freedom')
                                    ]),
                                    'CHISQ.INV': d('Cette fonction renvoie l\'inverse de la probabilité à queue gauche de la distribution du chi carré.', [
                                        e('probabilité'),
                                        e('deg_freedom')
                                    ]),
                                    'CONFIDENCE.T': d('Cette fonction renvoie l\'intervalle de confiance pour la distribution de Student.', [
                                        e('alpha'),
                                        e('standard_dev'),
                                        e('taille')
                                    ]),
                                    'NETWORKDAYS.INTL': d('Cette fonction renvoie le nombre de jours ouvrables entre deux dates en utilisant des arguments pour indiquer les jours fériés et les jours de week-end.', [
                                        e('date_début'),
                                        e('date_début'),
                                        e('[weekend]'),
                                        e('[vacances]')
                                    ]),
                                    'WORKDAY.INTL': d('Cette fonction renvoie le numéro de série de la date avant ou après un certain nombre de jours ouvrables avec des paramètres de week-end personnalisés. Ces paramètres indiquent les jours de week-end et les jours fériés.', [
                                        e('date_début'),
                                        e('nombre_jours'),
                                        e('[weekend]'),
                                        e('[vacances]')
                                    ]),
                                    'REFRESH': d('Cette fonction décide de la manière de recalculer la formule. Peut utiliser l\'argument evaluateMode pour spécifier la formule recalculer sur la valeur de référence modifiée, évaluer une fois, recalculer ou intervalle.', [
                                        e('formule'),
                                        e('mode_évaluation'),
                                        e('interval')
                                    ]),
                                    'DAYS': d('Cette fonction renvoie le nombre de jours entre deux dates.', [
                                        e('date_début'),
                                        e('date_début')
                                    ]),
                                    'ISOWEEKNUM': d('Cette fonction renvoie le numéro de la semaine ISO de l\'année pour une date donnée.', [
                                        e('date')
                                    ]),
                                    'BITAND': d('Cette fonction renvoie un "ET" de deux nombres.', [
                                        e('nombre1'),
                                        e('nombre2')
                                    ]),
                                    'BITLSHIFT': d('Cette fonction renvoie un "OU" de deux chiffres.', [
                                        e('nombre1'),
                                        e('shift_amount')
                                    ]),
                                    'BITOR': d('Cette fonction renvoie un "OU" de deux chiffres.', [
                                        e('nombre1'),
                                        e('nombre2')
                                    ]),
                                    'BITRSHIFT': d('Cette fonction renvoie un "OU" de deux chiffres.', [
                                        e('nombre1'),
                                        e('shift_amount')
                                    ]),
                                    'BITXOR': d('Cette fonction renvoie un "XOR" de deux nombres.', [
                                        e('nombre1'),
                                        e('nombre2')
                                    ]),
                                    'IMCOSH': d('Cette fonction renvoie le cosinus hyperbolique d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMCOT': d('Cette fonction renvoie la cotangente d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMCSC': d('Cette fonction renvoie la cosécante d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMCSCH': d('Cette fonction renvoie la cosécante hyperbolique d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSEC': d('Cette fonction renvoie la sécante d\'un nombre complexe au format texte x+yi de x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSECH': d('Cette fonction renvoie la sécante hyperbolique d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMSINH': d('Cette fonction renvoie le sinus hyperbolique d\'un nombre complexe au format texte x+yi de x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'IMTAN': d('Cette fonction renvoie la tangente d\'un nombre complexe au format texte x+yi ou x+yj.', [
                                        e('nombre_complexe')
                                    ]),
                                    'PDURATION': d('Cette fonction renvoie le nombre de périodes requises par un investissement pour atteindre une valeur donnée.', [
                                        e('taux'),
                                        e('pval'),
                                        e('fval')
                                    ]),
                                    'RRI': d('Cette fonction renvoie un taux d\'intérêt équivalent pour la croissance d\'un investissement.', [
                                        e('nper'),
                                        e('pval'),
                                        e('fval')
                                    ]),
                                    'ISFORMULA': d('Cette fonction vérifie si elle contient une formule d\'une cellule référencée.', [
                                        e('ref_cellule')
                                    ]),
                                    'IFNA': d('Cette fonction renvoie la valeur que vous spécifiez si la formule renvoie la valeur d\'erreur #N/A, sinon elle renvoie le résultat de la formule.', [
                                        e('valeur'),
                                        e('valeur_si_na')
                                    ]),
                                    'IFS': d('Cette fonction vérifie si une ou plusieurs conditions sont remplies et renvoie une valeur qui correspond à la première condition VRAIE.', [
                                        e('test_logique1'),
                                        e('valeur_si_vrai1', true)
                                    ]),
                                    'SWITCH': d('Cette fonction évalue une valeur pour une liste de valeurs, et renvoie le résultat correspondant à la première valeur correspondante, sinon renvoie la valeur par défaut', [
                                        e('expression'),
                                        e('valeur1'),
                                        e('résultat1'),
                                        e('[défault_ou_valeur2]', true),
                                        e('[resultat2]', true)
                                    ]),
                                    'XOR': d('Cette fonction renvoie une logique exclusive ou de tous les arguments.', [
                                        e('logique', true)
                                    ]),
                                    'AREAS': d('Cette fonction renvoie le nombre de domaines dans une référence.', [
                                        e('référence')
                                    ]),
                                    'FORMULATEXT': d('Cette fonction renvoie une formule sous forme de chaîne de caractères.', [
                                        e('référence')
                                    ]),
                                    'HYPERLINK': d('Cette fonction crée un raccourci ou un saut qui ouvre un document stocké sur un serveur de réseau, un intranet ou l\'Internet.', [
                                        e('chemin'),
                                        e('nom')
                                    ]),
                                    'ACOT': d('Cette fonction calcule l\'arccotangente inverse d\'un nombre.', [
                                        e('valeur')
                                    ]),
                                    'ACOTH': d('Cette fonction calcule l\'arccotangente hyperbolique inverse d\'un nombre.', [
                                        e('valeur')
                                    ]),
                                    'ARABIC': d('Cette fonction convertit un texte en chiffres romains en un équivalent en chiffres arabes.', [
                                        e('texte')
                                    ]),
                                    'BASE': d('Cette fonction convertit un nombre en une représentation textuelle avec la radix (base) donnée.', [
                                        e('nombre'),
                                        e('radix'),
                                        e('[longeur_min]')
                                    ]),
                                    'CEILING.MATH': d('Cette fonction permet d\'arrondir un nombre au nombre entier le plus proche ou au multiple de signification le plus proche.', [
                                        e('valeur'),
                                        e(y),
                                        e('[mode]')
                                    ]),
                                    'COMBINA': d('Cette fonction calcule le nombre de combinaisons possibles avec des répétitions pour un nombre déterminé d\'éléments.', [
                                        e('nombre'),
                                        e('nombre_choisi')
                                    ]),
                                    'COT': d('Cette fonction renvoie la cotangente de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'COTH': d('Cette fonction renvoie la cotangente hyperbolique du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'CSC': d('Cette fonction renvoie la cosécante de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'CSCH': d('Cette fonction renvoie le cosécant hyperbolique du nombre spécifié.', [
                                        e('valeur')
                                    ]),
                                    'DECIMAL': d('Cette fonction convertit une représentation textuelle d\'un nombre dans une base donnée en un nombre décimal.', [
                                        e('texte'),
                                        e('radix')
                                    ]),
                                    'FLOOR.MATH': d('Cette fonction permet d\'arrondir un nombre au nombre entier le plus proche ou au multiple de signification le plus proche.', [
                                        e('valeur'),
                                        e(y),
                                        e('[mode]')
                                    ]),
                                    'SEC': d('Cette fonction renvoie la sécante de l\'angle spécifié.', [
                                        e('angle')
                                    ]),
                                    'SECH': d('Cette fonction renvoie la sécante hyperbolique de la valeur spécifiée.', [
                                        e('valeur')
                                    ]),
                                    'BINOM.DIST.RANGE': d('Cette fonction calcule la probabilité d\'un résultat d\'essai en utilisant une distribution binomiale.', [
                                        e('essais'),
                                        e('probabilité_s'),
                                        e('nombre_s'),
                                        e('[number_s2]')
                                    ]),
                                    'GAMMA': d('Cette fonction renvoie la valeur de la fonction gamma.', [
                                        e('nombre')
                                    ]),
                                    'MAXIFS': d('Cette fonction renvoie la valeur maximale parmi les cellules spécifiées par un ensemble donné de conditions ou de critères.', [
                                        e('tableau'),
                                        e('condition_tableau',true),
                                        e('condition', true)
                                    ]),
                                    'GAUSS': d('Cette fonction calcule la probabilité qu\'un membre d\'une population normale standard se situe entre la moyenne et z écarts types par rapport à la moyenne.', [
                                        e('nombre')
                                    ]),
                                    'MINIFS': d('Cette fonction renvoie la valeur minimale parmi les cellules spécifiées par un ensemble donné de conditions ou de critères.', [
                                        e('tableau'),
                                        e('condition_tableau',true),
                                        e('condition', true)
                                    ]),
                                    'PERMUTATIONA': d('Cette fonction renvoie le nombre de permutations pour un nombre donné d\'objets qui peuvent être sélectionnés parmi le total des objets.', [
                                        e('number'),
                                        e('number_chosen')
                                    ]),
                                    'PHI': d('Cette fonction renvoie la valeur de la fonction de densité pour une distribution normale standard.', [
                                        e('valeur')
                                    ]),
                                    'SKEW.P': d('Cette fonction renvoie l\'asymétrie d\'une distribution basée sur une population : une caractérisation du degré d\'asymétrie d\'une distribution autour de sa moyenne.', [
                                        e('nombre1'),
                                        e('nombre2', true)
                                    ]),
                                    'BAHTTEXT': d('Cette fonction convertit un nombre en texte thaïlandais et ajoute un suffixe "Baht"', [
                                        e('nombre')
                                    ]),
                                    'CONCAT': d('Cette fonction combine plusieurs chaînes de texte ou nombres en une seule chaîne de texte, la fonction restera disponible pour la compatibilité avec la fonction " CONCATENER "..', [
                                        e('texte1'),
                                        e('texte2', true)
                                    ]),
                                    'FINDB': d('Cette fonction trouve une valeur de texte dans une autre et renvoie la position de la valeur de texte dans le texte que vous avez recherché, et compte chaque caractère à deux octets comme 2 lorsque vous définissez DBCS comme la langue par défaut.', [
                                        e('trouver_text'),
                                        e('dans_text'),
                                        e(x)
                                    ]),
                                    'LEFTB': d('Cette fonction renvoie les caractères les plus à gauche spécifiés à partir d\'une valeur de texte, et en fonction du nombre d\'octets que vous spécifiez.', [
                                        e('texte'),
                                        e('nombre_octets')
                                    ]),
                                    'LENB': d('Cette fonction renvoie la longueur du nombre d\'octets dans une chaîne de texte.', [
                                        e('texte')
                                    ]),
                                    'MIDB': d('Cette fonction renvoie le nombre de caractères requis à partir d\'une chaîne de texte commençant à la position que vous spécifiez, et basé sur le nombre d\'octets que vous spécifiez.', [
                                        e('texte'),
                                        e('position_début'),
                                        e('nombre_octets')
                                    ]),
                                    'REPLACEB': d('Cette fonction remplace une partie d\'une chaîne de texte par une chaîne de texte différente, en fonction du nombre d\'octets que vous spécifiez.', [
                                        e('ancien_texte'),
                                        e('début_byte'),
                                        e('nombre_octets'),
                                        e('nouveau_texte')
                                    ]),
                                    'RIGHTB': d('Cette fonction renvoie les caractères de droite spécifiés à partir d\'une valeur de texte, et en fonction du nombre d\'octets que vous spécifiez.', [
                                        e('texte'),
                                        e('nombre_octets')
                                    ]),
                                    'SEARCHB': d('Cette fonction trouve une chaîne de texte dans une autre chaîne de texte et renvoie l\'index de la position de départ du texte trouvé, et compte chaque caractère à double octet comme 2 lorsqu\'il est défini DBCS comme langue par défaut.', [
                                        e('trouver_text'),
                                        e('dans_text'),
                                        e(x)
                                    ]),
                                    'TEXTJOIN': d('Cette fonction combine plusieurs plages et/ou chaînes de caractères en un seul texte, et le texte comprend un délimiteur que vous spécifiez entre chaque valeur de texte.', [
                                        e('délimiteur'),
                                        e('ignorer_vide'),
                                        e('texte1'),
                                        e('texte2', true)
                                    ]),
                                    'UNICHAR': d('Cette fonction renvoie le caractère Unicode d\'une référence numérique donnée.', [
                                        e('nombre')
                                    ]),
                                    'UNICODE': d('Cette fonction renvoie le numéro correspondant au premier caractère du texte.', [
                                        e('texte')
                                    ]),
                                    'ENCODEURL': d('Cette fonction renvoie une chaîne codée par URL.', [
                                        e('texte')
                                    ]),
                                    'BC_QRCODE': d('Cette fonction renvoie un ensemble de données pour représenter un QRCode', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('niveau_correction_erreur'),
                                        e('modele'),
                                        e('version'),
                                        e('masque'),
                                        e('connexion'),
                                        e('numéro_connexion'),
                                        e('code_charater'),
                                        e('code_caractère'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_EAN13': d('Cette fonction renvoie un ensemble de données pour représenter un EAN13.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('ajouter_sur'),
                                        e('ajouter_sur_position_label'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_EAN8': d('Cette fonction renvoie un ensemble de données pour représenter un EAN8.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_CODABAR': d('Cette fonction renvoie un ensemble de données pour représenter un CODABAR.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('checkDigit'),
                                        e('nwRatio'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_CODE39': d('Cette fonction renvoie un ensemble de données pour représenter un CODE39.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('labelWithStartAndStopCharacter'),
                                        e('checkDigit'),
                                        e('nwRatio'),
                                        e('ASCII'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_CODE93': d('Cette fonction renvoie un ensemble de données pour représenter un CODE93.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('checkDigit'),
                                        e('fullASCII'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_CODE128': d('Cette fonction renvoie un ensemble de données pour représenter un CODE128.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('codeSet'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_GS1_128': d('Cette fonction renvoie un ensemble de données pour représenter un GS1_128.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_CODE49': d('Cette fonction renvoie un ensemble de données pour représenter un CODE49.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('montrer_label'),
                                        e('position_label'),
                                        e('groupé'),
                                        e('groupe_numéro'),
                                        e('famille_police'),
                                        e('style_police'),
                                        e('graisse_police'),
                                        e('texte_decoration'),
                                        e('texte_align'),
                                        e('taille_police'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_PDF417': d('Cette fonction renvoie un ensemble de données pour représenter un PDF417.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('niveau_correction_erreur'),
                                        e('lignes'),
                                        e('colonnes'),
                                        e('compacté'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'BC_DATAMATRIX': d('Cette fonction renvoie un ensemble de données pour représenter une DATAMATRICE.', [
                                        e('valeur'),
                                        e('couleur'),
                                        e('couleur_fond'),
                                        e('eccMode'),
                                        e('ecc200SymbolSize'),
                                        e('ecc200EncodingMode'),
                                        e('ecc00_140SymbolSize'),
                                        e('structuredAppend'),
                                        e('structureNumber'),
                                        e('identifiant_fichier'),
                                        e('zone_morte_gauche'),
                                        e('zone_morte_droite'),
                                        e('zone_morte_haute'),
                                        e('zone_morte_basse')
                                    ]),
                                    'FILTER': d('Cette fonction permet de filtrer une gamme ou un tableau.', [
                                        e('tableau'),
                                        e('inclure'),
                                        e('si_vide')
                                    ]),
                                    'RANDARRAY': d('Cette fonction renvoie un tableau de nombres aléatoires.', [
                                        e('lignes'),
                                        e('colonnes'),
                                        e('min'),
                                        e('max'),
                                        e('nombre_complet')
                                    ]),
                                    'SEQUENCE': d('Cette fonction renvoie une séquence de chiffres.', [
                                        e('lignes'),
                                        e('colonnes'),
                                        e('début'),
                                        e('échelon')
                                    ]),
                                    'SINGLE': d('Cette fonction renvoie une valeur unique lorsqu\'on lui donne une valeur, une plage ou un tableau.', [
                                        e('valeur')
                                    ]),
                                    'SORT': d('Cette fonction permet de trier une gamme ou un tableau.', [
                                        e('tableau'),
                                        e('tri_index'),
                                        e('tri_ordre'),
                                        e('par_colonne')
                                    ]),
                                    'SORTBY': d('Cette fonction trie une plage ou un tableau sur la base des valeurs d\'une plage ou d\'un tableau correspondant.', [
                                        e('tableau'),
                                        e('par_tableau1'),
                                        e('tri_order1'),
                                        e('par_tableau2',true),
                                        e('tri_order2',true)
                                    ]),
                                    'UNIQUE': d('Cette fonction renvoie les valeurs uniques d\'une plage ou d\'un tableau.', [
                                        e('tableau'),
                                        e('par_col'),
                                        e('occurance_unique')
                                    ]),
                                    'QUERY': d('This function returns data from data manager tables in a worksheet.', [
                                        e('tableAndRows'),
                                        e('columns')
                                    ]),
                                    'LET': d('Cette fonction assigne un nom aux résultats de calculs. Utile pour stocker des calculs intermédiaires ou valeures en définissant des noms à l\'intérieur d\'une formule. Ces noms seront applicables uniquement dans le rayon de la fonction LET.',[
                                            e("nom1"), 
                                            e("nom_valeur1"), 
                                            e("calcules_ou_nom2"), 
                                            e("[nom_valeur2, ...")
                                    ]),
                                    'IMAGE': d("Cette fonction affiche une image dans une cellule à partir d'une url ou d'une chaine en base64", [
                                            e("URL"),
                                            e("[mode]"),
                                            e("[hauteur]"),
                                            e("[largeur]"),
                                            e("[clipY]"),
                                            e("[clipX]"),
                                            e("[clipHeight]"),
                                            e("[clipWidth]"),
                                            e("[vAlign]"),
                                            e("[hAlign]")
                                    ]),
                                    'GETPIVOTDATA': d('Cette fonction extrait des données stockées dans un tableau croisé dynamique', [
                                            e('champ_donnée'),
                                            e('tableau_croisé'),
                                            e('[champ1, élem1]'),
                                            e('...')
                                    ]),
                                    'WEBSERVICE': d("Cette fonction retourne des données à partir d'un service web", [
                                            e('url')
                                    ]),
                                    'FILTERJSON': d("Cette fonction parse une chaine json pour une valeur scalaire, un objet ou un tableau d'objet.", [
                                            e('chaine_json')
                                    ]),
                                    'ASC': d("The ASC function changes full-width(double-byte) characters to half-width(single-byte) characters, Use with double-byte character sets (DBCS).", [
                                        e("text")
                                ]),
                                'DBCS': d("The DBCS function converts half-width(single-byte) letters within a character string to full-width(double-byte) characters.", [
                                        e("text")
                                ]),
                                'LAMBDA': d("Creates a function value, which can be called within formulas.", [
                                        e("parameter_or_calculation"), 
                                        e("[parameter_or_calculation]", !0)
                                ]),
                                'MAP': d("Returns an array formed by mapping each value in the array(s) to a new value by applying a LAMBDA to create a new value.", [
                                        e("array"), 
                                        e("lambda_or_array", !0)
                                ]),
                                'REDUCE': d("Reduces an array to an accumulated value by applying a LAMBDA to each value and returning the total value in the accumulator.", [
                                        e("init_value"), 
                                        e("array"), 
                                        e("function")
                                ]),
                                'SCAN': d("Scans an array by applying a LAMBDA to each value and returns an array that has each intermediate value.", [
                                        e("init_value"), 
                                        e("array"),
                                        e("function")
                                ]),
                                'MAKEARRAY': d("Returns a calculated array of a specified row and column size, by applying a LAMBDA.", [
                                        e("rows"), 
                                        e("cols"), 
                                        e("function")
                                ]),
                                'BYCOL': d("Applies a LAMBDA to each column and returns an array of the results. For example, if the original array is 3 columns by 2 rows, the returned array is 3 columns by 1 row.", [
                                        e("array"),
                                        e("function"),
                                ]),
                                'BYROW': d("Applies a LAMBDA to each row and returns an array of the results. For example, if the original array is 3 columns by 2 rows, the returned array is 1 column by 2 rows.", [
                                        e("array"),
                                        e("function"),
                                ]),
                                'ISOMITTED': d("Checks whether the value in a LAMBDA is missing and returns TRUE or FALSE.", [
                                        e("argument")
                                ]),
                                'TEXTBEFORE': d("Returns text that occurs before a given character or string.", [
                                    e("text"), 
                                    e("delimiter"), 
                                    e("[instance_num]"), 
                                    e(zf), 
                                    e("[match_end]"),
                                    e(zg)
                            ]),
                            'TEXTAFTER': d("Returns text that occurs after given character or string.", [
                                    e("text"), 
                                    e("delimiter"), 
                                    e("[instance_num]"), 
                                    e(zf), 
                                    e("[match_end]"), 
                                    e(zg)
                            ]),
                            'TEXTSPLIT': d("Splits text strings by using column and row delimiters.", [
                                    e("text"), 
                                    e("col_delimiter"), 
                                    e("[row_delimiter]"), 
                                    e("[ignore_empty]"), 
                                    e(zf), 
                                    e(zh)
                            ]),
                            'VSTACK': d("Appends arrays vertically and in sequence to return a larger array.", [
                                    e("array1"), 
                                    e("[array2]", 
                                    !0)
                            ]),
                            'HSTACK': d("Appends arrays horizontally and in sequence to return a larger array.", [
                                    e("array1"), 
                                    e("[array2]", 
                                    !0)
                            ]),
                            'TOROW': d("Returns the array in a single row.", [
                                    e("array"), 
                                    e("[ignore]"), 
                                    e("[scan_by_column]")
                            ]),
                            'TOCOL': d("Returns the array in a single column.", [
                                    e("array"), 
                                    e("[ignore]"), 
                                    e("[scan_by_column]")
                            ]),
                            'WRAPROWS': d("Wraps the provided row or column of values by rows after a specified number of elements to form a new array.", [
                                    e("vector"), 
                                    e("wrap_count"), 
                                    e(zh)
                            ]),
                            'WRAPCOLS': d("Wraps the provided row or column of values by columns after a specified number of elements to form a new array.", [
                                    e("vector"), 
                                    e("wrap_count"), 
                                    e(zh)
                            ]),
                            'TAKE': d("Returns a specified number of contiguous rows or columns from the start or end of an array.", [
                                    e("array"), 
                                    e("rows"), 
                                    e("[columns]")
                            ]),
                            'DROP': d("Excludes a specified number of rows or columns from the start or end of an array.", [
                                    e("array"), 
                                    e("rows"), 
                                    e("[columns]")
                            ]),
                            'EXPAND': d("Expands or pads an array to specified row and column dimensions.", [
                                    e("array"), 
                                    e("rows"), 
                                    e("[columns]"), 
                                    e(zh)
                            ]),
                            'CHOOSEROWS': d("Returns the specified rows from an array.", [
                                    e("array"), 
                                    e("row_num1"), 
                                    e("[row_num2]", 
                                    !0)
                            ]),
                            'CHOOSECOLS': d("Returns the specified columns from an array.", [
                                    e("array"), 
                                    e("col_num1"), 
                                    e("[col_num2]",
                                    !0)
                            ]),
                    },
                                B2: {
                                    All: {
                                        name: "#All",
                                        description: 'Retourne le contenu entier d\'une table ou d\'une colonne Returns the entire contents of the table, or specified table columns including column headers, data and total rows.'
                                    },
                                    Data: {
                                        name: "#Data",
                                        description: "Retourne les cellules données d'une table ou une colonne spécifique de la table "
                                    },
                                    Headers: { name: "#Headers", description: 'Renvoie les en-têtes de colonnes pour le tableau, ou des colonnes spécifiques du tableau.' },
                                    Totals: { name: "#Totals", description: 'Retourne le total des lignes du tableau ou des colonnes du tableau spécifié.' },
                                    thisRow: { name: "#This Row", description: 'Cette ligne.' },
                                },
                            });
                        },
                        "./src/resource.fr.entry.ts": function (a, b, c) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 });
                            var d = c("./src/calcEngine.res.fr.ts");
                            b.SR = { fr: d.resource };
                        },
                    })),
                    (a.exports = c.Spread.CalcEngine);
            },
            "./node_modules_local/@grapecity/js-pivot/dist/gc.pivot.resources.fr.js": function (a, b, c) {
                var d,
                    e,
                    f = "object" == typeof f ? f : {};
                (f.Pivot = (function (a) {
                    var b = {};
                    function c(d) {
                        if (b[d]) return b[d].exports;
                        var e = (b[d] = { i: d, l: !1, exports: {} });
                        return a[d].call(e.exports, e, e.exports, c), (e.l = !0), e.exports;
                    }
                    return (
                        (c.m = a),
                        (c.c = b),
                        (c.d = function (a, b, d) {
                            c.o(a, b) || Object.defineProperty(a, b, { enumerable: !0, get: d });
                        }),
                        (c.r = function (a) {
                            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(a, "__esModule", { value: !0 });
                        }),
                        (c.t = function (a, b) {
                            var d, e;
                            if ((1 & b && (a = c(a)), 8 & b)) return a;
                            if (4 & b && "object" == typeof a && a && a.__esModule) return a;
                            if (((d = Object.create(null)), c.r(d), Object.defineProperty(d, "default", { enumerable: !0, value: a }), 2 & b && "string" != typeof a))
                                for (e in a)
                                    c.d(
                                        d,
                                        e,
                                        function (b) {
                                            return a[b];
                                        }.bind(null, e)
                                    );
                            return d;
                        }),
                        (c.n = function (a) {
                            var b =
                                a && a.__esModule
                                    ? function b() {
                                          return a.default;
                                      }
                                    : function b() {
                                          return a;
                                      };
                            return c.d(b, "a", b), b;
                        }),
                        (c.o = function (a, b) {
                            return Object.prototype.hasOwnProperty.call(a, b);
                        }),
                        (c.p = ""),
                        c((c.s = "./src/resource.fr.entry.ts"))
                    );
                })({
                    "./src/pivotEngine.res.fr.ts": function (a, b, c) {
                        "use strict";
                        Object.defineProperty(b, "__esModule", { value: !0 }),
                            (b.resource = {
                                dateResource: {
                                    Jan: "Jan",
                                    Feb: "Fev",
                                    Mar: "Mar",
                                    Apr: "Avr",
                                    May: "Mai",
                                    Jun: "Jui",
                                    Jul: "Jul",
                                    Aug: "Aou",
                                    Sep: "Sep",
                                    Oct: "Oct",
                                    Nov: "Nov",
                                    Dec: "Dec",
                                    Qtr1: "Tri1",
                                    Qtr2: "Tri2",
                                    Qtr3: "Tri3",
                                    Qtr4: "Tri4",
                                    Seconds: "Secondes",
                                    Minutes: "Minutes",
                                    Hours: "Heurs",
                                    Days: "Jours",
                                    Months: "Mois",
                                    Quarters: "Trimestres",
                                    Years: "Années",
                                    SECOND_GROUP_ITEMS: [":00", ":01", ":02", ":03", ":04", ":05", ":06", ":07", ":08", ":09", ":10", ":11", ":12", ":13", ":14", ":15", ":16", ":17", ":18", ":19", ":20", ":21", ":22", ":23", ":24", ":25", ":26", ":27", ":28", ":29", ":30", ":31", ":32", ":33", ":34", ":35", ":36", ":37", ":38", ":39", ":40", ":41", ":42", ":43", ":44", ":45", ":46", ":47", ":48", ":49", ":50", ":51", ":52", ":53", ":54", ":55", ":56", ":57", ":58", ":59"],
                                    MINUTE_GROUP_ITEMS: [":00", ":01", ":02", ":03", ":04", ":05", ":06", ":07", ":08", ":09", ":10", ":11", ":12", ":13", ":14", ":15", ":16", ":17", ":18", ":19", ":20", ":21", ":22", ":23", ":24", ":25", ":26", ":27", ":28", ":29", ":30", ":31", ":32", ":33", ":34", ":35", ":36", ":37", ":38", ":39", ":40", ":41", ":42", ":43", ":44", ":45", ":46", ":47", ":48", ":49", ":50", ":51", ":52", ":53", ":54", ":55", ":56", ":57", ":58", ":59"],
                                    HOUR_GROUP_ITEMS: ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]
                                },
                                Exp_NoItemParseError: "An item name cannot be found. Check that you've typed the name correctly and the item is present in the PivotTable report.",
                                Exp_UnsupportedCalcItemType: "References, names, and arrays are not supported in PivotTable formulas.",
                                blank: "(blank)"
                            });
                    },
                    "./src/resource.fr.entry.ts": function (a, b, c) {
                        "use strict";
                        Object.defineProperty(b, "__esModule", { value: !0 });
                        var d = c("./src/pivotEngine.res.fr.ts");
                        b.SR = { fr: d.resource };
                    },
                })),
                    (function (c) {
                        "object" == typeof a.exports
                            ? (a.exports = c.Pivot)
                            : ((d = []),
                              (e = function () {
                                  return c.Pivot;
                              }.apply(b, d)),
                              !(void 0 !== e && (a.exports = e)));
                    })(f || {});
            },
            "./node_modules_local/@grapecity/js-sheets-common/dist/gc.spread.common.resources.fr.js": function (a, b) {
                var c = "object" == typeof c ? c : {};
                (c.Spread = c.Spread || {}),
                    (c.Spread.Common = (function (a) {
                        var b = {};
                        function c(d) {
                            if (b[d]) return b[d].exports;
                            var e = (b[d] = { i: d, l: !1, exports: {} });
                            return a[d].call(e.exports, e, e.exports, c), (e.l = !0), e.exports;
                        }
                        return (
                            (c.m = a),
                            (c.c = b),
                            (c.d = function (a, b, d) {
                                c.o(a, b) || Object.defineProperty(a, b, { enumerable: !0, get: d });
                            }),
                            (c.r = function (a) {
                                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(a, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(a, "__esModule", { value: !0 });
                            }),
                            (c.t = function (a, b) {
                                var d, e;
                                if ((1 & b && (a = c(a)), 8 & b)) return a;
                                if (4 & b && "object" == typeof a && a && a.__esModule) return a;
                                if (((d = Object.create(null)), c.r(d), Object.defineProperty(d, "default", { enumerable: !0, value: a }), 2 & b && "string" != typeof a))
                                    for (e in a)
                                        c.d(
                                            d,
                                            e,
                                            function (b) {
                                                return a[b];
                                            }.bind(null, e)
                                        );
                                return d;
                            }),
                            (c.n = function (a) {
                                var b =
                                    a && a.__esModule
                                        ? function b() {
                                            return a.default;
                                        }
                                        : function b() {
                                            return a;
                                        };
                                return c.d(b, "a", b), b;
                            }),
                            (c.o = function (a, b) {
                                return Object.prototype.hasOwnProperty.call(a, b);
                            }),
                            (c.p = "/assets/"),
                            c((c.s = "./src/resource.fr.entry.ts"))
                        );
                    })({
                        "./src/common/util/util.res.fr.ts": function (a, b, c) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 }),
                                (b.Exp_InvalidDateFormat = 'Modèle de format de date non valide'),
                                (b.Exp_InvalidExponentFormat = 'format d\'exposant non valide'),
                                (b.Exp_InvalidSemicolons = 'format non valide : trop de points-virgules'),
                                (b.Exp_InvalidNumberGroupSize = 'NumberGroupSize doit être compris entre 1 et 9, sauf pour le dernier élément, qui peut être zéro.'),
                                (b.Exp_BadFormatSpecifier = 'Mauvaise spécification de format'),
                                (b.Exp_InvalidNumberFormat = 'Modèle de format de numérotation non valide'),
                                (b.Exp_InvalidCast = 'InvalidCastException'),
                                (b.Exp_Separator = 'numberDecimalSeparator, listSeparator et arrayListSeparator doivent être différents dans l\'information sur les clutures.')
                        },
                        "./src/plugins/formatter/formatter.res.fr.ts": function (a, b, c) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 }),
                                (b.Exp_TokenIsNull = 'Le code est nul'),
                                (b.Exp_InvalidBackslash = 'Le \'\\\' ne peut être évalué'),
                                (b.Exp_FormatIllegal = 'le format est interdit..'),
                                (b.Exp_ValueIsNull = 'la valeur est nulle'),
                                (b.Exp_DuplicatedDescriptor = 'Le type de descripteur a été ajouté.'),
                                (b.Exp_TokenIllegal = 'Le code est interdit..'),
                                (b.Exp_ValueIllegal = 'la valeur est interdite.'),
                                (b.Exp_InvalidCast = 'InvalidCastException')
                        },
                        "./src/resource.fr.entry.ts": function (a, b, c) {
                            "use strict";
                            var d, e, f, g;
                            Object.defineProperty(b, "__esModule", { value: !0 }), (d = c("./src/common/util/util.res.fr.ts")), (e = c("./src/plugins/formatter/formatter.res.fr.ts")), (f = d);
                            for (g in e) e.hasOwnProperty(g) && (f[g] = e[g]);
                            b.SR = { fr: f };
                        },
                    })),
                    (a.exports = c.Spread.Common);
            },
            "./resource.fr.entry.js": function (b, c, d) {
                var e;
                function f(a, b, c) {
                    return g(a, b), g(a, c), a;
                }
                function g(a, b) {
                    for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
                    return a;
                }
                (a = a || {}),
                    (a.Spread = a.Spread || {}),
                    a.Spread.Common &&
                        a.Spread.Common.SR &&
                        ((e = d("./node_modules_local/@grapecity/js-sheets-common/dist/gc.spread.common.resources.fr.js").SR.fr),
                        (a.Spread.Common.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Common = g({}, e))),
                    a.Spread.CalcEngine &&
                        a.Spread.CalcEngine.SR &&
                        ((e = d("./node_modules_local/@grapecity/js-calc/dist/gc.spread.calcengine.resources.fr.js").SR.fr),
                        (a.Spread.CalcEngine.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].CalcEngine = g({}, e))),
                    a.Spread.Sheets &&
                        a.Spread.Sheets.SR &&
                        ((e = d("./dist/core/core.res.fr.js")),
                        (a.Spread.Sheets.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Sheets = g({}, e))),
                    a.Spread.Sheets.Bindings &&
                        a.Spread.Sheets.Bindings.SR &&
                        ((e = d("./dist/plugins/data/data.res.fr.js")),
                        (a.Spread.Sheets.Bindings.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Bindings = g({}, e))),
                    a.Spread.Sheets.Outlines &&
                        a.Spread.Sheets.Outlines.SR &&
                        ((e = d("./dist/plugins/group/group.res.fr.js")),
                        (a.Spread.Sheets.Outlines.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Outlines = g({}, e))),
                    a.Spread.Sheets.ConditionalFormatting &&
                        a.Spread.Sheets.ConditionalFormatting.SR &&
                        ((e = d("./dist/plugins/conditional/conditional.res.fr.js")),
                        (a.Spread.Sheets.ConditionalFormatting.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].ConditionalFormatting = g({}, e))),
                    a.Spread.Sheets.Touch &&
                        a.Spread.Sheets.Touch.SR &&
                        ((e = d("./dist/plugins/touch/touch.res.fr.js")),
                        (a.Spread.Sheets.Touch.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Touch = g({}, e))),
                    a.Spread.Sheets.FloatingObjects &&
                        a.Spread.Sheets.FloatingObjects.SR &&
                        ((e = d("./dist/plugins/floatingObject/floatingobject.res.fr.js")),
                        (a.Spread.Sheets.FloatingObjects.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].FloatingObjects = g({}, e))),
                    a.Spread.Sheets.CellTypes &&
                        a.Spread.Sheets.CellTypes.SR &&
                        ((e = d("./dist/plugins/celltype/celltypes.res.fr.js")),
                        (a.Spread.Sheets.CellTypes.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].CellTypes = g({}, e))),
                    a.Spread.Sheets.Filter &&
                        a.Spread.Sheets.Filter.SR &&
                        ((e = d("./dist/plugins/filter/filter.res.fr.js")),
                        (a.Spread.Sheets.Filter.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Filter = g({}, e))),
                    a.Spread.Sheets.Tables &&
                        a.Spread.Sheets.Tables.SR &&
                        ((e = d("./dist/plugins/table/table.res.fr.js")),
                        (a.Spread.Sheets.Tables.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Tables = g({}, e))),
                    a.Spread.Sheets.Fill &&
                        a.Spread.Sheets.Fill.SR &&
                        ((e = d("./dist/plugins/fill/fill.res.fr.js")),
                        (a.Spread.Sheets.Fill.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Fill = g({}, e))),
                    a.Spread.Sheets.ContextMenu &&
                        a.Spread.Sheets.ContextMenu.SR &&
                        ((e = d("./dist/plugins/contextMenu/context-menu.res.fr.js")),
                        (a.Spread.Sheets.ContextMenu.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].ContextMenu = g({}, e))),
                    a.Spread.Sheets.OutlineColumn &&
                        a.Spread.Sheets.OutlineColumn.SR &&
                        ((e = d("./dist/plugins/outlineColumn/outlineColumn.res.fr.js")),
                        (a.Spread.Sheets.OutlineColumn.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].OutlineColumn = g({}, e))),
                    a.Spread.Sheets.StatusBar &&
                        a.Spread.Sheets.StatusBar.SR &&
                        ((e = d("./dist/plugins/statusBar/statusBar.res.fr.js")),
                        (a.Spread.Sheets.StatusBar.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].StatusBar = g({}, e))),
                    a.Spread.Sheets.AutoMerge &&
                        a.Spread.Sheets.AutoMerge.SR &&
                        ((e = d("./dist/plugins/autoMerge/autoMerge.res.fr.js")),
                        (a.Spread.Sheets.AutoMerge.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].AutoMerge = g({}, e))),
                    a.Spread.Sheets.Print &&
                        a.Spread.Sheets.Print.SR &&
                        ((e = d("./dist/plugins/print/print.res.fr.js")),
                        (a.Spread.Sheets.Print.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Print = g({}, e))),
                    a.Spread.Sheets.Charts &&
                        a.Spread.Sheets.Charts.SR &&
                        ((e = d("./dist/plugins/chart/chart.res.fr.js")),
                        (a.Spread.Sheets.Charts.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Charts = g({}, e))),
                    a.Spread.Sheets.PDF &&
                        a.Spread.Sheets.PDF.SR &&
                        ((e = d("./dist/plugins/exportPDF/printPdf.res.fr.js")),
                        (a.Spread.Sheets.PDF.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].PDF = g({}, e))),
                    a.Spread.Sheets.Shapes &&
                        a.Spread.Sheets.Shapes.SR &&
                        ((e = d("./dist/plugins/shape/shape.res.fr.js")),
                        (a.Spread.Sheets.Shapes.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Shapes = g({}, e))),
                    a.Spread.Sheets.Slicers &&
                        a.Spread.Sheets.Slicers.SR &&
                        ((e = d("./dist/plugins/slicer/slicer.res.fr.js")),
                        (a.Spread.Sheets.Slicers.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].Slicers = g({}, e))),
                    a.Spread.Pivot &&
                        a.Spread.Pivot.SR &&
                        ((e = d("./dist/plugins/pivot/pivot.res.fr.js")),
                        (a.Spread.Pivot.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].PivotTables = g({}, e))),
                    a.Spread.Sheets.TableSheet &&
                        a.Spread.Sheets.TableSheet.SR &&
                        ((e = d("./dist/plugins/tableSheet/tableSheet.res.fr.js")),
                        (a.Spread.Sheets.TableSheet.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].TableSheet = g({}, e))),
                    a.Spread.Sheets.IO &&
                        a.Spread.Sheets.IO.SR &&
                        ((e = d("./dist/plugins/io/io.res.fr.js")),
                        (a.Spread.Sheets.IO.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        a.Spread.Common.CultureManager.KLJ["fr-FR"] || (a.Spread.Common.CultureManager.KLJ["fr-FR"] = {}),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].IO = g({}, e))),
                    a.Pivot &&
                        a.Pivot.SR &&
                        ((e = d("./node_modules_local/@grapecity/js-pivot/dist/gc.pivot.resources.fr.js").SR.fr),
                        (a.Pivot.SR.fr = f({}, a.Spread.Common.SR.fr || {}, e)),
                        (a.Spread.Common.CultureManager.KLJ["fr-FR"].PivotEngine = g({}, e))),
                    (b.exports = a.Spread);
            },
            Common: function (b, c) {
                b.exports = a.Spread;
            },
            Core: function (b, c) {
                b.exports = a.Spread.Sheets;
            },
        }));
});
